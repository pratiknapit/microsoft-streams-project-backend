============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.2.5, py-1.10.0, pluggy-1.0.0 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/tmp_amd/kamen/export/kamen/3/cs1531/project-automarking/tempstore/.hypothesis/examples')
rootdir: /tmp_amd/kamen/export/kamen/3/cs1531/project-automarking/tempstore, configfile: pytest.ini
plugins: forked-1.3.0, xdist-2.2.1, hypothesis-6.1.1, timeout-1.4.2
collecting ... collected 356 items

http_tests/admin_tests/test_admin_user_remove.py::test_once_removed_user_cant_do_anything FAILED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_messages_after_user_removal_correct_format FAILED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_removed_profile_still_fetchable_with_user_profile FAILED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_channel FAILED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_dm FAILED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_not_in_users_all FAILED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_email_reusable FAILED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_handle_reusable FAILED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_invalid_user FAILED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_last_owner FAILED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_user_nonowner FAILED [  3%]
http_tests/admin_tests/test_admin_user_remove.py::test_invalid_token FAILED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_successful_permission_change FAILED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_cannot_demote_last_owner FAILED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_nonowner_cant_change_permissions FAILED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_user FAILED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_permission FAILED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_token FAILED [  5%]
http_tests/auth_tests/test_auth_login.py::test_successful_login PASSED   [  5%]
http_tests/auth_tests/test_auth_login.py::test_can_have_two_sessions FAILED [  5%]
http_tests/auth_tests/test_auth_login.py::test_unregistered_user PASSED  [  5%]
http_tests/auth_tests/test_auth_login.py::test_registered_but_incorrect_password PASSED [  6%]
http_tests/auth_tests/test_auth_logout.py::test_successful_logout PASSED [  6%]
http_tests/auth_tests/test_auth_logout.py::test_accesserror_when_already_logged_out FAILED [  6%]
http_tests/auth_tests/test_auth_register.py::test_invalid_email[@gmail.com] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_email[bob] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_email[bob@bob@bob.com] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_password[12345] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_password[] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_first[] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_first[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_last[] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_last[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_email PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_removed_user_name PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_successful_registration PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_basic_handle_generated_correctly[Bob-Smith-bobsmith] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_basic_handle_generated_correctly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] PASSED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] FAILED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[abc-def0-abcdef0-abc-def-abcdef1] PASSED [ 11%]
http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_can_addowner_when_member PASSED [ 12%]
http_tests/channel_tests/test_channel_addowner.py::test_global_owner_member_can_addowner PASSED [ 13%]
http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_cant_addowner_when_non_member PASSED [ 13%]
http_tests/channel_tests/test_channel_addowner.py::test_non_member_cannot_add_owner FAILED [ 13%]
http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_cant_addowner_private FAILED [ 14%]
http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_cant_addowner_public FAILED [ 14%]
http_tests/channel_tests/test_channel_addowner.py::test_member_cannot_add_owner PASSED [ 14%]
http_tests/channel_tests/test_channel_addowner.py::test_cannot_addowner_prexisting_channel_owner PASSED [ 14%]
http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_u_id PASSED [ 15%]
http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_channel_id PASSED [ 15%]
http_tests/channel_tests/test_channel_addowner.py::test_invalid_token FAILED [ 15%]
http_tests/channel_tests/test_channel_details.py::test_member_successful PASSED [ 16%]
http_tests/channel_tests/test_channel_details.py::test_non_member_not_successful PASSED [ 16%]
http_tests/channel_tests/test_channel_details.py::test_invalid_channel_id PASSED [ 16%]
http_tests/channel_tests/test_channel_details.py::test_invalid_token FAILED [ 16%]
http_tests/channel_tests/test_channel_invite.py::test_duplicate_invite PASSED [ 17%]
http_tests/channel_tests/test_channel_invite.py::test_invite_global_owner PASSED [ 17%]
http_tests/channel_tests/test_channel_invite.py::test_invite_global_member PASSED [ 17%]
http_tests/channel_tests/test_channel_invite.py::test_invitation_from_non_channel_member PASSED [ 17%]
http_tests/channel_tests/test_channel_invite.py::test_channel_id_invalid PASSED [ 18%]
http_tests/channel_tests/test_channel_invite.py::test_u_id_invalid FAILED [ 18%]
http_tests/channel_tests/test_channel_invite.py::test_invalidated_token FAILED [ 18%]
http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_public PASSED [ 19%]
http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_private PASSED [ 19%]
http_tests/channel_tests/test_channel_join.py::test_global_member_join_public PASSED [ 19%]
http_tests/channel_tests/test_channel_join.py::test_global_member_cant_join_private PASSED [ 19%]
http_tests/channel_tests/test_channel_join.py::test_already_joined_channel PASSED [ 20%]
http_tests/channel_tests/test_channel_join.py::test_join_invalid_channel_id PASSED [ 20%]
http_tests/channel_tests/test_channel_join.py::test_invalidated_token FAILED [ 20%]
http_tests/channel_tests/test_channel_leave.py::test_member_leave_channel_successfully PASSED [ 21%]
http_tests/channel_tests/test_channel_leave.py::test_leave_channel_when_not_member PASSED [ 21%]
http_tests/channel_tests/test_channel_leave.py::test_invalid_channel_id PASSED [ 21%]
http_tests/channel_tests/test_channel_leave.py::test_invalid_token FAILED [ 21%]
http_tests/channel_tests/test_channel_messages.py::test_under_fifty_messages_sent FAILED [ 22%]
http_tests/channel_tests/test_channel_messages.py::test_over_fifty_messages_sent FAILED [ 22%]
http_tests/channel_tests/test_channel_messages.py::test_removal_by_edit_reflected FAILED [ 22%]
http_tests/channel_tests/test_channel_messages.py::test_removal_by_deletion_reflected PASSED [ 23%]
http_tests/channel_tests/test_channel_messages.py::test_input_error_when_start_greater_than_message_num PASSED [ 23%]
http_tests/channel_tests/test_channel_messages.py::test_access_error_when_user_is_non_member PASSED [ 23%]
http_tests/channel_tests/test_channel_messages.py::test_input_error_when_channel_id_invalid PASSED [ 23%]
http_tests/channel_tests/test_channel_messages.py::test_access_error_when_invalid_token_given FAILED [ 24%]
http_tests/channel_tests/test_channel_removeowner.py::test_owner_can_remove_owner PASSED [ 24%]
http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_member_can_remove_owner PASSED [ 24%]
http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_nonmember_cannot_remove_owner FAILED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_nonmember_cannot_remove_owner FAILED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_member_cannot_remove_owner FAILED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_last_owner PASSED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_cannot_remove_only_owner PASSED [ 26%]
http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_non_owner PASSED [ 26%]
http_tests/channel_tests/test_channel_removeowner.py::test_invalid_u_id PASSED [ 26%]
http_tests/channel_tests/test_channel_removeowner.py::test_with_invalid_channel_id PASSED [ 26%]
http_tests/channel_tests/test_channel_removeowner.py::test_invalidated_token FAILED [ 27%]
http_tests/channels_tests/test_channels_create.py::test_create_channel[True-andys room] PASSED [ 27%]
http_tests/channels_tests/test_channels_create.py::test_create_channel[False-andys room] PASSED [ 27%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[True-] PASSED [ 28%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 28%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[False-] PASSED [ 28%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 28%]
http_tests/channels_tests/test_channels_create.py::test_invalidated_token FAILED [ 29%]
http_tests/channels_tests/test_channels_list.py::test_when_in_no_channels PASSED [ 29%]
http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[True-andy] PASSED [ 29%]
http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[False-andy] PASSED [ 30%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-True-ZERG-andy] PASSED [ 30%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-False-ZERG-andy] PASSED [ 30%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-True-ZERG-andy] PASSED [ 30%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-False-ZERG-andy] PASSED [ 31%]
http_tests/channels_tests/test_channels_list.py::test_list_after_leave_channel PASSED [ 31%]
http_tests/channels_tests/test_channels_list.py::test_invalidated_token FAILED [ 31%]
http_tests/channels_tests/test_channels_listall.py::test_when_no_channels PASSED [ 32%]
http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_private PASSED [ 32%]
http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_public PASSED [ 32%]
http_tests/channels_tests/test_channels_listall.py::test_when_multiple_channels_exist PASSED [ 32%]
http_tests/channels_tests/test_channels_listall.py::test_invalidated_token FAILED [ 33%]
http_tests/dm_tests/test_dm_create.py::test_successful_dm_creation PASSED [ 33%]
http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_single PASSED [ 33%]
http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_multiple FAILED [ 33%]
http_tests/dm_tests/test_dm_create.py::test_dm_to_invalid_users PASSED   [ 34%]
http_tests/dm_tests/test_dm_create.py::test_dm_to_users_but_one_invalid PASSED [ 34%]
http_tests/dm_tests/test_dm_create.py::test_invalid_token FAILED         [ 34%]
http_tests/dm_tests/test_dm_details.py::test_member_successful PASSED    [ 35%]
http_tests/dm_tests/test_dm_details.py::test_non_member_not_successful PASSED [ 35%]
http_tests/dm_tests/test_dm_details.py::test_invalid_dm_id PASSED        [ 35%]
http_tests/dm_tests/test_dm_details.py::test_invalid_token FAILED        [ 35%]
http_tests/dm_tests/test_dm_leave.py::test_member_leave_dm_successfully PASSED [ 36%]
http_tests/dm_tests/test_dm_leave.py::test_leave_dm_when_not_member PASSED [ 36%]
http_tests/dm_tests/test_dm_leave.py::test_invalid_dm_id PASSED          [ 36%]
http_tests/dm_tests/test_dm_leave.py::test_invalid_token FAILED          [ 37%]
http_tests/dm_tests/test_dm_list.py::test_when_in_no_dms PASSED          [ 37%]
http_tests/dm_tests/test_dm_list.py::test_when_in_one_dm PASSED          [ 37%]
http_tests/dm_tests/test_dm_list.py::test_when_in_multiple_dms PASSED    [ 37%]
http_tests/dm_tests/test_dm_list.py::test_list_after_leave_dm PASSED     [ 38%]
http_tests/dm_tests/test_dm_list.py::test_invalidated_token FAILED       [ 38%]
http_tests/dm_tests/test_dm_messages.py::test_under_fifty_messages_sent FAILED [ 38%]
http_tests/dm_tests/test_dm_messages.py::test_over_fifty_messages_sent FAILED [ 39%]
http_tests/dm_tests/test_dm_messages.py::test_removal_by_edit_reflected FAILED [ 39%]
http_tests/dm_tests/test_dm_messages.py::test_removal_by_deletion_reflected FAILED [ 39%]
http_tests/dm_tests/test_dm_messages.py::test_input_error_when_start_greater_than_message_num PASSED [ 39%]
http_tests/dm_tests/test_dm_messages.py::test_access_error_when_user_is_non_member PASSED [ 40%]
http_tests/dm_tests/test_dm_messages.py::test_input_error_when_dm_id_invalid PASSED [ 40%]
http_tests/dm_tests/test_dm_messages.py::test_access_error_when_invalid_token_given FAILED [ 40%]
http_tests/dm_tests/test_dm_remove.py::test_successful_dm_removal FAILED [ 41%]
http_tests/dm_tests/test_dm_remove.py::test_nonowner_cannot_remove_dm PASSED [ 41%]
http_tests/dm_tests/test_dm_remove.py::test_invalid_dm_id FAILED         [ 41%]
http_tests/dm_tests/test_dm_remove.py::test_invalid_token FAILED         [ 42%]
http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message_channel PASSED [ 42%]
http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message_dm FAILED [ 42%]
http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message_channel PASSED [ 42%]
http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message_dm FAILED [ 43%]
http_tests/message_tests/test_message_edit.py::test_global_owner_can_edit_members_message_channel FAILED [ 43%]
http_tests/message_tests/test_message_edit.py::test_global_owner_cant_edit_members_message_dm FAILED [ 43%]
http_tests/message_tests/test_message_edit.py::test_empty_edit_deletes_message FAILED [ 44%]
http_tests/message_tests/test_message_edit.py::test_invalid_message_length PASSED [ 44%]
http_tests/message_tests/test_message_edit.py::test_cannot_edit_deleted_message FAILED [ 44%]
http_tests/message_tests/test_message_edit.py::test_nonowner_nonposter_cant_edit PASSED [ 44%]
http_tests/message_tests/test_message_edit.py::test_invalid_token FAILED [ 45%]
http_tests/message_tests/test_message_meta.py::test_message_ids_unique FAILED [ 45%]
http_tests/message_tests/test_message_remove.py::test_original_poster_can_remove_message PASSED [ 50%]
http_tests/message_tests/test_message_remove.py::test_owner_can_remove_members_message PASSED [ 51%]
http_tests/message_tests/test_message_remove.py::test_global_owner_can_remove_members_message_channel FAILED [ 51%]
http_tests/message_tests/test_message_remove.py::test_global_owner_cant_remove_members_message_dm FAILED [ 51%]
http_tests/message_tests/test_message_remove.py::test_cannot_remove_deleted_message PASSED [ 51%]
http_tests/message_tests/test_message_remove.py::test_nonowner_nonposter_cant_remove_message PASSED [ 52%]
http_tests/message_tests/test_message_remove.py::test_invalid_token FAILED [ 52%]
http_tests/message_tests/test_message_send.py::test_valid_message PASSED [ 52%]
http_tests/message_tests/test_message_send.py::test_nonmember_post PASSED [ 53%]
http_tests/message_tests/test_message_send.py::test_invalid_channel PASSED [ 53%]
http_tests/message_tests/test_message_send.py::test_invalid_message[] PASSED [ 53%]
http_tests/message_tests/test_message_send.py::test_invalid_message[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 53%]
http_tests/message_tests/test_message_send.py::test_invalid_token FAILED [ 54%]
http_tests/message_tests/test_message_senddm.py::test_valid_message FAILED [ 54%]
http_tests/message_tests/test_message_senddm.py::test_nonmember_post FAILED [ 54%]
http_tests/message_tests/test_message_senddm.py::test_invalid_dm FAILED  [ 55%]
http_tests/message_tests/test_message_senddm.py::test_invalid_message[] FAILED [ 55%]
http_tests/message_tests/test_message_senddm.py::test_invalid_message[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] FAILED [ 55%]
http_tests/message_tests/test_message_senddm.py::test_invalid_token FAILED [ 55%]
http_tests/other_tests/test_clear.py::test_clear_works PASSED            [ 67%]
http_tests/other_tests/test_users_all.py::test_successful_users_all PASSED [ 74%]
http_tests/other_tests/test_users_all.py::test_invalid_token FAILED      [ 75%]
http_tests/user_tests/test_user_profile.py::test_user_profile_valid PASSED [ 90%]
http_tests/user_tests/test_user_profile.py::test_invalid_user PASSED     [ 90%]
http_tests/user_tests/test_user_profile.py::test_invalid_token FAILED    [ 90%]
http_tests/user_tests/test_user_profile_setemail.py::test_successful_email_change FAILED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_cannot_change_to_taken_email PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[] PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[bob] PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab.com] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[@gmail.com] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab@ab@gmail.com] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_token FAILED [ 92%]
http_tests/user_tests/test_user_profile_sethandle.py::test_successful_handle_change FAILED [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_cannot_change_to_taken_handle PASSED [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[] PASSED [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[a] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aa] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aaaaaaaaaaaaaaaaaaaaa] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[new handle] FAILED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[newh@ndle] FAILED [ 95%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_token FAILED [ 95%]
http_tests/user_tests/test_user_profile_setname.py::test_user_profile_setname_valid_name FAILED [ 95%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_token FAILED [ 97%]

====== Marks recorded: 56.18 ======


=================================== FAILURES ===================================
___________________ test_once_removed_user_cant_do_anything ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_once_removed_user_cant_do_anything(user_woody, user_zerg, woodys_public_toybox, ctx):
>       admin_user_remove(user_woody.token, user_zerg.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_______________ test_messages_after_user_removal_correct_format ________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f214fe84510>
ctx = None

    def test_messages_after_user_removal_correct_format(user_woody, user_zerg, woodys_public_toybox, message_factory, ctx):
        channel_join(user_zerg.token, woodys_public_toybox.channel_id, ctx)
        message_factory(user_zerg, woodys_public_toybox, 'hi')
    
>       admin_user_remove(user_woody.token, user_zerg.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
____________ test_removed_profile_still_fetchable_with_user_profile ____________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='lordzerg')
ctx = None

    def test_removed_profile_still_fetchable_with_user_profile(user_woody, user_zerg, ctx):
>       admin_user_remove(user_woody.token, user_zerg.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________ test_removal_removed_from_channel _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_removal_removed_from_channel(user_woody, user_zerg, woodys_public_toybox, ctx):
        channel_join(user_zerg.token, woodys_public_toybox.channel_id, ctx)
    
>       admin_user_remove(user_woody.token, user_zerg.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_________________________ test_removal_removed_from_dm _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_removal_removed_from_dm(user_woody, user_buzz, woody_and_buzz_dm, ctx):
>       admin_user_remove(user_woody.token, user_buzz.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
________________________ test_removal_not_in_users_all _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='lordzerg')
ctx = None

    def test_removal_not_in_users_all(user_woody, user_zerg, ctx):
>       admin_user_remove(user_woody.token, user_zerg.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_____________________________ test_email_reusable ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='lordzerg')
ctx = None

    def test_email_reusable(user_woody, user_zerg, ctx):
>       admin_user_remove(user_woody.token, user_zerg.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_____________________________ test_handle_reusable _____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='lordzerg')
ctx = None

    def test_handle_reusable(user_woody, user_zerg, ctx):
>       admin_user_remove(user_woody.token, user_zerg.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_user _______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_invalid_user(user_woody, ctx):
        with pytest.raises(InputError):
>           admin_user_remove(user_woody.token, -1, ctx)

http_tests/admin_tests/test_admin_user_remove.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
________________________ test_cannot_remove_last_owner _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_cannot_remove_last_owner(user_woody, ctx):
        with pytest.raises(InputError):
>           admin_user_remove(user_woody.token, user_woody.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_______________________ test_cannot_remove_user_nonowner _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='buzzlightyear')
ctx = None

    def test_cannot_remove_user_nonowner(user_woody, user_buzz, ctx):
        with pytest.raises(AccessError):
>           admin_user_remove(user_buzz.token, user_woody.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='buzzlightyear')
ctx = None

    def test_invalid_token(user_woody, user_buzz, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           admin_user_remove(user_woody.token, user_buzz.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________ test_successful_permission_change _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='buzzlightyear')
ctx = None

    def test_successful_permission_change(user_woody, user_buzz, ctx):
>       admin_userpermission_change(user_woody.token, user_buzz.u_id, Permissions.DREAMS_OWNER, ctx)

http_tests/admin_tests/test_admin_userpermission_change.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:25: in admin_userpermission_change
    token=token, u_id=u_id, permission_id=permission_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
________________________ test_cannot_demote_last_owner _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_cannot_demote_last_owner(user_woody, ctx):
        with pytest.raises(InputError):
>           admin_userpermission_change(user_woody.token, user_woody.u_id, Permissions.DREAMS_MEMBER, ctx)

http_tests/admin_tests/test_admin_userpermission_change.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:25: in admin_userpermission_change
    token=token, u_id=u_id, permission_id=permission_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
____________________ test_nonowner_cant_change_permissions _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='buzzlightyear')
ctx = None

    def test_nonowner_cant_change_permissions(user_woody, user_buzz, ctx):
        with pytest.raises(AccessError):
>           admin_userpermission_change(user_buzz.token, user_woody.u_id, Permissions.DREAMS_MEMBER, ctx)

http_tests/admin_tests/test_admin_userpermission_change.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:25: in admin_userpermission_change
    token=token, u_id=u_id, permission_id=permission_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_user _______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_invalid_user(user_woody, ctx):
        with pytest.raises(InputError):
>           admin_userpermission_change(user_woody.token, -1, Permissions.DREAMS_OWNER, ctx)

http_tests/admin_tests/test_admin_userpermission_change.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:25: in admin_userpermission_change
    token=token, u_id=u_id, permission_id=permission_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
___________________________ test_invalid_permission ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='buzzlightyear')
ctx = None

    def test_invalid_permission(user_woody, user_buzz, ctx):
        with pytest.raises(InputError):
>           admin_userpermission_change(user_woody.token, user_buzz.u_id, 1531, ctx)

http_tests/admin_tests/test_admin_userpermission_change.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:25: in admin_userpermission_change
    token=token, u_id=u_id, permission_id=permission_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='buzzlightyear')
ctx = None

    def test_invalid_token(user_woody, user_buzz, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           admin_userpermission_change(user_woody.token, user_buzz.u_id, Permissions.DREAMS_OWNER, ctx)

http_tests/admin_tests/test_admin_userpermission_change.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:25: in admin_userpermission_change
    token=token, u_id=u_id, permission_id=permission_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
__________________________ test_can_have_two_sessions __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    @pytest.mark.overrideMarks(2)
    def test_can_have_two_sessions(user_woody, ctx):
        session2 = auth_login(user_woody.email, user_woody.password, ctx)
    
        # succeeds
        assert user_profile(session2['token'], user_woody.u_id, ctx) == user_profile(user_woody.token, user_woody.u_id, ctx)
    
>       assert auth_logout(session2['token'], ctx) == {}
E       AssertionError: assert {'is_success': True} == {}
E         Left contains 1 more item:
E         {'is_success': True}
E         Full diff:
E         - {}
E         + {'is_success': True}

http_tests/auth_tests/test_auth_login.py:28: AssertionError
___________________ test_accesserror_when_already_logged_out ___________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_accesserror_when_already_logged_out(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
    
        with pytest.raises(AccessError):
>           auth_logout(user_woody.token, ctx)

http_tests/auth_tests/test_auth_logout.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:25: in auth_logout
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
_ test_duplicate_handles_generated_correctly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] _

first1 = '@bcdefgh!j', last1 = 'klmn opqrst', handle1 = 'bcdefghjklmnopqrst'
first2 = 'bcdefghj', last2 = 'klmnopqrst', handle2 = 'bcdefghjklmnopqrst0'
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def test_duplicate_handles_generated_correctly(first1, last1, handle1, first2, last2, handle2, woodys_public_toybox, user_woody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        auth_register('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = auth_register(email1, 'password1', first1, last1, ctx)
>       assert handle1 == user_profile(user1['token'], user1['auth_user_id'], ctx)['user']['handle_str']
E       AssertionError: assert 'bcdefghjklmnopqrst' == '@bcdefgh!jklmn opqrs'
E         - @bcdefgh!jklmn opqrs
E         ? -       -     -
E         + bcdefghjklmnopqrst
E         ?                  +

http_tests/auth_tests/test_auth_register.py:96: AssertionError
_______________________ test_non_member_cannot_add_owner _______________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='buzzlightyear')
ctx = None

    def test_non_member_cannot_add_owner(woodys_public_toybox, user_buzz, ctx):
        with pytest.raises(AccessError):
>           channel_addowner(user_buzz.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)

http_tests/channel_tests/test_channel_addowner.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:69: in channel_addowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
______________ test_global_owner_non_member_cant_addowner_private ______________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[2], all_members=[])
ctx = None

    def test_global_owner_non_member_cant_addowner_private(user_woody, zergs_private_lair, ctx):
        with pytest.raises(AccessError):
>           channel_addowner(user_woody.token, zergs_private_lair.channel_id, user_woody.u_id, ctx)

http_tests/channel_tests/test_channel_addowner.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:69: in channel_addowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
______________ test_global_owner_non_member_cant_addowner_public _______________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
ctx = None

    def test_global_owner_non_member_cant_addowner_public(user_buzz, woodys_public_toybox, ctx):
        with pytest.raises(AccessError):
>           channel_addowner(user_buzz.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)

http_tests/channel_tests/test_channel_addowner.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:69: in channel_addowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='buzzlightyear')
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, user_buzz, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_addowner(user_buzz.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)

http_tests/channel_tests/test_channel_addowner.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:69: in channel_addowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_details(user_woody.token, woodys_public_toybox.channel_id, ctx)

http_tests/channel_tests/test_channel_details.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:25: in channel_details
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_u_id_invalid _______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_u_id_invalid(user_woody, woodys_public_toybox, ctx):
        with pytest.raises(InputError):
>           channel_invite(user_woody.token, woodys_public_toybox.channel_id, -1, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.InputError'>

http_tests/channel_tests/test_channel_invite.py:52: Failed
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='buzzlightyear')
ctx = None

    def test_invalidated_token(user_woody, woodys_public_toybox, user_buzz, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)

http_tests/channel_tests/test_channel_invite.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:14: in channel_invite
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_invalidated_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_join(user_woody.token, woodys_public_toybox.channel_id, ctx)

http_tests/channel_tests/test_channel_join.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:58: in channel_join
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_leave(user_woody.token, woodys_public_toybox.channel_id, ctx)

http_tests/channel_tests/test_channel_leave.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:47: in channel_leave
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
________________________ test_under_fifty_messages_sent ________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_under_fifty_messages_sent(woodys_public_toybox, user_woody, ctx):
        message_ids = [
            message_send(user_woody.token, woodys_public_toybox.channel_id, 'you are a toy', ctx)['message_id'] for x in
            range(10)
        ]
    
        ch_msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
    
        assert ch_msgs['start'] == 0
        assert ch_msgs['end'] == -1
>       assert message_ids[::-1] == [m['message_id'] for m in ch_msgs['messages']]
E       assert [10, 9, 8, 7, 6, 5, 4, 3, 2, 1] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
E         At index 0 diff: 10 != 1
E         Full diff:
E         - [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
E         + [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

http_tests/channel_tests/test_channel_messages.py:25: AssertionError
________________________ test_over_fifty_messages_sent _________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_over_fifty_messages_sent(woodys_public_toybox, user_woody, ctx):
        message_ids = [
            message_send(user_woody.token, woodys_public_toybox.channel_id, 'you are a toy', ctx)['message_id'] for x in
            range(51)
        ]
        message_ids.reverse()
    
        ch_msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
        assert ch_msgs['start'] == 0
        assert ch_msgs['end'] == 50
>       assert message_ids[0: 50] == [m['message_id'] for m in ch_msgs['messages']]
E       assert [51,\n 50,\n 49,\n 48,\n 47,\n 46,\n 45,\n 44,\n 43,\n 42,\n 41,\n 40,\n 39,\n 38,\n 37,\n 36,\n 35,\n 34,\n 33,\n 32,\n 31,\n 30,\n 29,\n 28,\n 27,\n 26,\n 25,\n 24,\n 23,\n 22,\n 21,\n 20,\n 19,\n 18,\n 17,\n 16,\n 15,\n 14,\n 13,\n 12,\n 11,\n 10,\n 9,\n 8,\n 7,\n 6,\n 5,\n 4,\n 3,\n 2] == [1,\n 2,\n 3,\n 4,\n 5,\n 6,\n 7,\n 8,\n 9,\n 10,\n 11,\n 12,\n 13,\n 14,\n 15,\n 16,\n 17,\n 18,\n 19,\n 20,\n 21,\n 22,\n 23,\n 24,\n 25,\n 26,\n 27,\n 28,\n 29,\n 30,\n 31,\n 32,\n 33,\n 34,\n 35,\n 36,\n 37,\n 38,\n 39,\n 40,\n 41,\n 42,\n 43,\n 44,\n 45,\n 46,\n 47,\n 48,\n 49,\n 50]
E         At index 0 diff: 51 != 1
E         Full diff:
E           [
E         -  1,
E         +  51,
E         ?  +
E         +  50,
E         +  49,
E         +  48,
E         +  47,
E         +  46,
E         +  45,
E         +  44,
E         +  43,
E         +  42,
E         +  41,
E         +  40,
E         +  39,
E         +  38,
E         +  37,
E         +  36,
E         +  35,
E         +  34,
E         +  33,
E         +  32,
E         +  31,
E         +  30,
E         +  29,
E         +  28,
E         +  27,
E         +  26,
E         +  25,
E         +  24,
E         +  23,
E         +  22,
E         +  21,
E         +  20,
E         +  19,
E         +  18,
E         +  17,
E         +  16,
E         +  15,
E         +  14,
E         +  13,
E         +  12,
E         +  11,
E         +  10,
E         +  9,
E         +  8,
E         +  7,
E         +  6,
E         +  5,
E         +  4,
E         +  3,
E            2,
E         -  3,
E         -  4,
E         -  5,
E         -  6,
E         -  7,
E         -  8,
E         -  9,
E         -  10,
E         -  11,
E         -  12,
E         -  13,
E         -  14,
E         -  15,
E         -  16,
E         -  17,
E         -  18,
E         -  19,
E         -  20,
E         -  21,
E         -  22,
E         -  23,
E         -  24,
E         -  25,
E         -  26,
E         -  27,
E         -  28,
E         -  29,
E         -  30,
E         -  31,
E         -  32,
E         -  33,
E         -  34,
E         -  35,
E         -  36,
E         -  37,
E         -  38,
E         -  39,
E         -  40,
E         -  41,
E         -  42,
E         -  43,
E         -  44,
E         -  45,
E         -  46,
E         -  47,
E         -  48,
E         -  49,
E         -  50,
E           ]

http_tests/channel_tests/test_channel_messages.py:38: AssertionError
________________________ test_removal_by_edit_reflected ________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_removal_by_edit_reflected(woodys_public_toybox, user_woody, ctx):
        msg = message_send(user_woody.token, woodys_public_toybox.channel_id, 'you are a toy maybe?', ctx)['message_id']
    
        ch_msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
        assert ch_msgs['start'] == 0
        assert ch_msgs['end'] == -1
        assert msg in [m['message_id'] for m in ch_msgs['messages']]
    
>       message_edit(user_woody.token, msg, '', ctx)

http_tests/channel_tests/test_channel_messages.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:35: in message_edit
    token=token, message_id=message_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
__________________ test_access_error_when_invalid_token_given __________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_access_error_when_invalid_token_given(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)

http_tests/channel_tests/test_channel_messages.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:36: in channel_messages
    token=token, channel_id=channel_id, start=start
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
_______________ test_global_owner_nonmember_cannot_remove_owner ________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='lordzerg')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=3, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjN9.QtU3Jik2ZblN_2mcbqWIhwRctYnm4K6VjgxaRZIBb3M', handle_str='buzzlightyear')
ctx = None

    def test_global_owner_nonmember_cannot_remove_owner(user_zerg, user_woody, woodys_public_toybox, user_buzz, ctx):
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        channel_addowner(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        with pytest.raises(AccessError):
>           channel_removeowner(user_zerg.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/channel_tests/test_channel_removeowner.py:46: Failed
______________________ test_nonmember_cannot_remove_owner ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='buzzlightyear')
ctx = None

    def test_nonmember_cannot_remove_owner(user_woody, woodys_public_toybox, user_buzz, ctx):
        with pytest.raises(AccessError):
>           channel_removeowner(user_buzz.token, woodys_public_toybox.channel_id, user_woody.u_id, ctx)

http_tests/channel_tests/test_channel_removeowner.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:80: in channel_removeowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
_______________________ test_member_cannot_remove_owner ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='buzzlightyear')
ctx = None

    def test_member_cannot_remove_owner(user_woody, woodys_public_toybox, user_buzz, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
        with pytest.raises(AccessError):
>           channel_removeowner(user_buzz.token, woodys_public_toybox.channel_id, user_woody.u_id, ctx)

http_tests/channel_tests/test_channel_removeowner.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:80: in channel_removeowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='buzzlightyear')
ctx = None

    def test_invalidated_token(user_woody, woodys_public_toybox, user_buzz, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_removeowner(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)

http_tests/channel_tests/test_channel_removeowner.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:80: in channel_removeowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_invalidated_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channels_create(user_woody.token, 'literally anything', True, ctx)

http_tests/channels_tests/test_channels_create.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channels.py:37: in channels_create
    token=token, name=name, is_public=is_public
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_invalidated_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channels_list(user_woody.token, ctx)

http_tests/channels_tests/test_channels_list.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channels.py:15: in channels_list
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_invalidated_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channels_listall(user_woody.token, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/channels_tests/test_channels_listall.py:44: Failed
________________________ test_dm_name_creation_multiple ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='buzzlightyear')
ctx = None

    def test_dm_name_creation_multiple(user_woody, user_buzz, ctx):
        the_dm = dm_create(user_woody.token, [user_buzz.u_id], ctx)
        dm_deets = dm_details(user_woody.token, the_dm['dm_id'], ctx)
    
>       assert dm_deets['name'] == ', '.join(sorted([user_woody.handle_str, user_buzz.handle_str]))
E       AssertionError: assert 'buzzlightyear,sheriffwoody' == 'buzzlightyear, sheriffwoody'
E         - buzzlightyear, sheriffwoody
E         ?               -
E         + buzzlightyear,sheriffwoody

http_tests/dm_tests/test_dm_create.py:35: AssertionError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           dm_create(user_woody.token, [], ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/dm_tests/test_dm_create.py:51: Failed
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_invalid_token(user_woody, woody_and_buzz_dm, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           dm_details(user_woody.token, woody_and_buzz_dm.dm_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/dm_tests/test_dm_details.py:43: Failed
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_invalid_token(user_woody, woody_and_buzz_dm, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           dm_leave(user_woody.token, woody_and_buzz_dm.dm_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/dm_tests/test_dm_leave.py:37: Failed
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_invalidated_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           dm_list(user_woody.token, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/dm_tests/test_dm_list.py:43: Failed
________________________ test_under_fifty_messages_sent ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_under_fifty_messages_sent(user_woody, woody_and_buzz_dm, ctx):
        message_ids = [
            message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy', ctx)['message_id'] for x in
>           range(10)
        ]

http_tests/dm_tests/test_dm_messages.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/dm_tests/test_dm_messages.py:17: in <listcomp>
    message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy', ctx)['message_id'] for x in
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
________________________ test_over_fifty_messages_sent _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_over_fifty_messages_sent(user_woody, woody_and_buzz_dm, ctx):
        message_ids = [
            message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy', ctx)['message_id'] for x in
>           range(51)
        ]

http_tests/dm_tests/test_dm_messages.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/dm_tests/test_dm_messages.py:30: in <listcomp>
    message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy', ctx)['message_id'] for x in
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
________________________ test_removal_by_edit_reflected ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_removal_by_edit_reflected(user_woody, woody_and_buzz_dm, ctx):
>       msg = message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy maybe?', ctx)['message_id']

http_tests/dm_tests/test_dm_messages.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________ test_removal_by_deletion_reflected ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_removal_by_deletion_reflected(user_woody, woody_and_buzz_dm, ctx):
>       msg = message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy maybe?', ctx)['message_id']

http_tests/dm_tests/test_dm_messages.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
__________________ test_access_error_when_invalid_token_given __________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_access_error_when_invalid_token_given(user_woody, woody_and_buzz_dm, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           dm_messages(user_woody.token, woody_and_buzz_dm.dm_id, 0, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/dm_tests/test_dm_messages.py:94: Failed
__________________________ test_successful_dm_removal __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_successful_dm_removal(user_woody, user_buzz, woody_and_buzz_dm, ctx):
        assert dm_remove(user_woody.token, woody_and_buzz_dm.dm_id, ctx) == {}
    
>       assert dm_list(user_woody.token, ctx)['dms'] == []
E       AssertionError: assert [{'dm_id': 1, 'name': 'buzzlightyear,sheriffwoody'}] == []
E         Left contains one more item: {'dm_id': 1, 'name': 'buzzlightyear,sheriffwoody'}
E         Full diff:
E         - []
E         + [{'dm_id': 1, 'name': 'buzzlightyear,sheriffwoody'}]

http_tests/dm_tests/test_dm_remove.py:17: AssertionError
______________________________ test_invalid_dm_id ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_invalid_dm_id(user_woody, woody_and_buzz_dm, ctx):
        # should succeed
        dm_remove(user_woody.token, woody_and_buzz_dm.dm_id, ctx)
        with pytest.raises(InputError):
            # should fail
>           dm_remove(user_woody.token, woody_and_buzz_dm.dm_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.InputError'>

http_tests/dm_tests/test_dm_remove.py:44: Failed
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_invalid_token(user_woody, woody_and_buzz_dm, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           dm_remove(user_woody.token, woody_and_buzz_dm.dm_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/dm_tests/test_dm_remove.py:50: Failed
___________________ test_original_poster_can_edit_message_dm ___________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f214fd52ea0>
ctx = None

    def test_original_poster_can_edit_message_dm(user_woody, woody_and_buzz_dm, message_factory, ctx):
>       a_msg = message_factory(user_woody, woody_and_buzz_dm)

http_tests/message_tests/test_message_edit.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:104: in make_message
    msg_id = message.message_senddm(poster.token, location.dm_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
____________________ test_owner_can_edit_members_message_dm ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='buzzlightyear')
message_factory = <function message_factory.<locals>.make_message at 0x7f214ff0ff28>
ctx = None

    def test_owner_can_edit_members_message_dm(user_woody, woody_and_buzz_dm, user_buzz, message_factory, ctx):
>       buzzs_msg = message_factory(user_buzz, woody_and_buzz_dm)

http_tests/message_tests/test_message_edit.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:104: in make_message
    msg_id = message.message_senddm(poster.token, location.dm_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________ test_global_owner_can_edit_members_message_channel ______________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='lordzerg')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f214fd9a400>
ctx = None

    def test_global_owner_can_edit_members_message_channel(user_zerg, user_woody, woodys_public_toybox, message_factory, ctx):
        woodys_msg = message_factory(user_woody, woodys_public_toybox)
        channel_join(user_zerg.token, woodys_public_toybox.channel_id, ctx)
>       message_edit(user_zerg.token, woodys_msg.message_id, 'hi', ctx)

http_tests/message_tests/test_message_edit.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:35: in message_edit
    token=token, message_id=message_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
________________ test_global_owner_cant_edit_members_message_dm ________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='buzzlightyear')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=2, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f214fd64e18>
ctx = None

    def test_global_owner_cant_edit_members_message_dm(user_buzz, user_woody, woody_and_buzz_dm, message_factory, ctx):
>       woodys_msg = message_factory(user_woody, woody_and_buzz_dm)

http_tests/message_tests/test_message_edit.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:104: in make_message
    msg_id = message.message_senddm(poster.token, location.dm_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_______________________ test_empty_edit_deletes_message ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f214febc9d8>
ctx = None

    def test_empty_edit_deletes_message(user_woody, woodys_public_toybox, message_factory, ctx):
        woodys_msg = message_factory(user_woody, woodys_public_toybox)
>       message_edit(user_woody.token, woodys_msg.message_id, '', ctx)

http_tests/message_tests/test_message_edit.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:35: in message_edit
    token=token, message_id=message_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
_______________________ test_cannot_edit_deleted_message _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f214fd49620>
ctx = None

    def test_cannot_edit_deleted_message(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox, 'hi')
    
        # should succeed
>       message_edit(user_woody.token, a_msg.message_id, '', ctx)

http_tests/message_tests/test_message_edit.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:35: in message_edit
    token=token, message_id=message_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f214fcdb9d8>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           message_edit(user_woody.token, a_msg.message_id, 'hi', ctx)

http_tests/message_tests/test_message_edit.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:35: in message_edit
    token=token, message_id=message_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
___________________________ test_message_ids_unique ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=1, members=[3], name='buzzlightyear,sheriffwoody', dm_id=1)
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[2], all_members=[])
ctx = None

    @pytest.mark.marks(0.5)
    def test_message_ids_unique(user_woody, user_zerg, woody_and_buzz_dm, zergs_private_lair, ctx):
        msg1 = message_send(user_zerg.token, zergs_private_lair.channel_id, 'hi', ctx)
    
        # cross
>       msg2 = message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'hi again', ctx)

http_tests/message_tests/test_message_meta.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_____________ test_global_owner_can_remove_members_message_channel _____________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='lordzerg')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f214fd0b510>
ctx = None

    def test_global_owner_can_remove_members_message_channel(user_zerg, user_woody, woodys_public_toybox, message_factory, ctx):
        woodys_msg = message_factory(user_woody, woodys_public_toybox)
        channel_join(user_zerg.token, woodys_public_toybox.channel_id, ctx)
>       message_remove(user_zerg.token, woodys_msg.message_id, ctx)

http_tests/message_tests/test_message_remove.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:24: in message_remove
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
_______________ test_global_owner_cant_remove_members_message_dm _______________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='buzzlightyear')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.qxI83UlcztE58UnGj66EXCxo7Hv_3IDnl4a1GTZGZvA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=2, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f214fe58400>
ctx = None

    def test_global_owner_cant_remove_members_message_dm(user_buzz, user_woody, woody_and_buzz_dm, message_factory, ctx):
>       woodys_msg = message_factory(user_woody, woody_and_buzz_dm)

http_tests/message_tests/test_message_remove.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:104: in make_message
    msg_id = message.message_senddm(poster.token, location.dm_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f214fda3bf8>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           message_remove(user_woody.token, a_msg.message_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/message_tests/test_message_remove.py:75: Failed
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           message_send(user_woody.token, woodys_public_toybox.channel_id, 'AccessError nooooooooo', ctx)

http_tests/message_tests/test_message_send.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_valid_message ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_valid_message(user_woody, woody_and_buzz_dm, ctx):
        msg_text = 'hello, world'
>       msg = message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, msg_text, ctx)

http_tests/message_tests/test_message_senddm.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_____________________________ test_nonmember_post ______________________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=2, members=[3], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_nonmember_post(user_zerg, woody_and_buzz_dm, ctx):
        with pytest.raises(AccessError):
>           message_senddm(user_zerg.token, woody_and_buzz_dm.dm_id, 'hi', ctx)

http_tests/message_tests/test_message_senddm.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_______________________________ test_invalid_dm ________________________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='buzzlightyear')
ctx = None

    def test_invalid_dm(user_buzz, ctx):
        with pytest.raises(InputError):
>           message_senddm(user_buzz.token, -1, 'Hello world', ctx)

http_tests/message_tests/test_message_senddm.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
____________________________ test_invalid_message[] ____________________________

message = ''
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    @pytest.mark.parametrize('message', ['', 'm' * 1001])
    def test_invalid_message(message, user_woody, woody_and_buzz_dm, ctx):
        with pytest.raises(InputError):
>           message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, message, ctx)

http_tests/message_tests/test_message_senddm.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_ test_invalid_message[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] _

message = 'mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm...mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm'
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    @pytest.mark.parametrize('message', ['', 'm' * 1001])
    def test_invalid_message(message, user_woody, woody_and_buzz_dm, ctx):
        with pytest.raises(InputError):
>           message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, message, ctx)

http_tests/message_tests/test_message_senddm.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_invalid_token(user_woody, woody_and_buzz_dm, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'AccessError nooooooooo', ctx)

http_tests/message_tests/test_message_senddm.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:101: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           users_all(user_woody.token, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/other_tests/test_users_all.py:29: Failed
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_profile(user_woody.token, user_woody.u_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/user_tests/test_user_profile.py:32: Failed
_________________________ test_successful_email_change _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_successful_email_change(user_woody, ctx):
        new_email = 'toystory3@pixar.com'
        user_profile_setemail(user_woody.token, new_email, ctx)
    
        deets = user_profile(user_woody.token, user_woody.u_id, ctx).popitem()[-1]
    
>       assert deets['email'] == new_email
E       AssertionError: assert 'sheriff.woody@andysroom.com' == 'toystory3@pixar.com'
E         - toystory3@pixar.com
E         + sheriff.woody@andysroom.com

http_tests/user_tests/test_user_profile_setemail.py:20: AssertionError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_profile_setemail(user_woody.token, user_woody.email, ctx)

http_tests/user_tests/test_user_profile_setemail.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:35: in user_profile_setemail
    token=token, email=email
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
________________________ test_successful_handle_change _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_successful_handle_change(user_woody, ctx):
        new_handle = 'www'
        user_profile_sethandle(user_woody.token, new_handle, ctx)
    
        deets = user_profile(user_woody.token, user_woody.u_id, ctx).popitem()[-1]
    
>       assert deets['handle_str'] == new_handle
E       AssertionError: assert 'sheriffwoody' == 'www'
E         - www
E         + sheriffwoody

http_tests/user_tests/test_user_profile_sethandle.py:20: AssertionError
_______________________ test_invalid_handle[new handle] ________________________

handle_str = 'new handle'
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('handle_str', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def test_invalid_handle(handle_str, user_woody, ctx):
        with pytest.raises(InputError):
>           user_profile_sethandle(user_woody.token, handle_str, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.InputError'>

http_tests/user_tests/test_user_profile_sethandle.py:31: Failed
________________________ test_invalid_handle[newh@ndle] ________________________

handle_str = 'newh@ndle'
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('handle_str', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def test_invalid_handle(handle_str, user_woody, ctx):
        with pytest.raises(InputError):
>           user_profile_sethandle(user_woody.token, handle_str, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.InputError'>

http_tests/user_tests/test_user_profile_sethandle.py:31: Failed
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_profile_sethandle(user_woody.token, user_woody.handle_str, ctx)

http_tests/user_tests/test_user_profile_sethandle.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:46: in user_profile_sethandle
    token=token, handle_str=handle_str
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
_____________________ test_user_profile_setname_valid_name _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_user_profile_setname_valid_name(user_woody, ctx):
        #  woody became japanese with family coming first
        user_profile_setname(user_woody.token, user_woody.name_last, user_woody.name_first, ctx)
    
        deets = user_profile(user_woody.token, user_woody.u_id, ctx).popitem()[-1]
    
>       assert deets['name_first'] == user_woody.name_last
E       AssertionError: assert 'sheriff' == 'woody'
E         - woody
E         + sheriff

http_tests/user_tests/test_user_profile_setname.py:20: AssertionError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.Tgc08Ho3-NQ86U15Ed-9WpatUI7iSabcSiAwjeAzlW0', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_profile_setname(user_woody.token, user_woody.name_last, user_woody.name_first, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/user_tests/test_user_profile_setname.py:34: Failed
=========================== short test summary info ============================
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_once_removed_user_cant_do_anything
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_messages_after_user_removal_correct_format
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removed_profile_still_fetchable_with_user_profile
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_channel
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_dm
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_not_in_users_all
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_email_reusable
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_handle_reusable
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_invalid_user - ...
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_last_owner
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_user_nonowner
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_invalid_token
FAILED http_tests/admin_tests/test_admin_userpermission_change.py::test_successful_permission_change
FAILED http_tests/admin_tests/test_admin_userpermission_change.py::test_cannot_demote_last_owner
FAILED http_tests/admin_tests/test_admin_userpermission_change.py::test_nonowner_cant_change_permissions
FAILED http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_user
FAILED http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_permission
FAILED http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_token
FAILED http_tests/auth_tests/test_auth_login.py::test_can_have_two_sessions
FAILED http_tests/auth_tests/test_auth_logout.py::test_accesserror_when_already_logged_out
FAILED http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0]
FAILED http_tests/channel_tests/test_channel_addowner.py::test_non_member_cannot_add_owner
FAILED http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_cant_addowner_private
FAILED http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_cant_addowner_public
FAILED http_tests/channel_tests/test_channel_addowner.py::test_invalid_token
FAILED http_tests/channel_tests/test_channel_details.py::test_invalid_token
FAILED http_tests/channel_tests/test_channel_invite.py::test_u_id_invalid - F...
FAILED http_tests/channel_tests/test_channel_invite.py::test_invalidated_token
FAILED http_tests/channel_tests/test_channel_join.py::test_invalidated_token
FAILED http_tests/channel_tests/test_channel_leave.py::test_invalid_token - E...
FAILED http_tests/channel_tests/test_channel_messages.py::test_under_fifty_messages_sent
FAILED http_tests/channel_tests/test_channel_messages.py::test_over_fifty_messages_sent
FAILED http_tests/channel_tests/test_channel_messages.py::test_removal_by_edit_reflected
FAILED http_tests/channel_tests/test_channel_messages.py::test_access_error_when_invalid_token_given
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_nonmember_cannot_remove_owner
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_nonmember_cannot_remove_owner
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_member_cannot_remove_owner
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_invalidated_token
FAILED http_tests/channels_tests/test_channels_create.py::test_invalidated_token
FAILED http_tests/channels_tests/test_channels_list.py::test_invalidated_token
FAILED http_tests/channels_tests/test_channels_listall.py::test_invalidated_token
FAILED http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_multiple
FAILED http_tests/dm_tests/test_dm_create.py::test_invalid_token - Failed: DI...
FAILED http_tests/dm_tests/test_dm_details.py::test_invalid_token - Failed: D...
FAILED http_tests/dm_tests/test_dm_leave.py::test_invalid_token - Failed: DID...
FAILED http_tests/dm_tests/test_dm_list.py::test_invalidated_token - Failed: ...
FAILED http_tests/dm_tests/test_dm_messages.py::test_under_fifty_messages_sent
FAILED http_tests/dm_tests/test_dm_messages.py::test_over_fifty_messages_sent
FAILED http_tests/dm_tests/test_dm_messages.py::test_removal_by_edit_reflected
FAILED http_tests/dm_tests/test_dm_messages.py::test_removal_by_deletion_reflected
FAILED http_tests/dm_tests/test_dm_messages.py::test_access_error_when_invalid_token_given
FAILED http_tests/dm_tests/test_dm_remove.py::test_successful_dm_removal - As...
FAILED http_tests/dm_tests/test_dm_remove.py::test_invalid_dm_id - Failed: DI...
FAILED http_tests/dm_tests/test_dm_remove.py::test_invalid_token - Failed: DI...
FAILED http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message_dm
FAILED http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message_dm
FAILED http_tests/message_tests/test_message_edit.py::test_global_owner_can_edit_members_message_channel
FAILED http_tests/message_tests/test_message_edit.py::test_global_owner_cant_edit_members_message_dm
FAILED http_tests/message_tests/test_message_edit.py::test_empty_edit_deletes_message
FAILED http_tests/message_tests/test_message_edit.py::test_cannot_edit_deleted_message
FAILED http_tests/message_tests/test_message_edit.py::test_invalid_token - Ex...
FAILED http_tests/message_tests/test_message_meta.py::test_message_ids_unique
FAILED http_tests/message_tests/test_message_remove.py::test_global_owner_can_remove_members_message_channel
FAILED http_tests/message_tests/test_message_remove.py::test_global_owner_cant_remove_members_message_dm
FAILED http_tests/message_tests/test_message_remove.py::test_invalid_token - ...
FAILED http_tests/message_tests/test_message_send.py::test_invalid_token - Ex...
FAILED http_tests/message_tests/test_message_senddm.py::test_valid_message - ...
FAILED http_tests/message_tests/test_message_senddm.py::test_nonmember_post
FAILED http_tests/message_tests/test_message_senddm.py::test_invalid_dm - Exc...
FAILED http_tests/message_tests/test_message_senddm.py::test_invalid_message[]
FAILED http_tests/message_tests/test_message_senddm.py::test_invalid_message[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm]
FAILED http_tests/message_tests/test_message_senddm.py::test_invalid_token - ...
FAILED http_tests/other_tests/test_users_all.py::test_invalid_token - Failed:...
FAILED http_tests/user_tests/test_user_profile.py::test_invalid_token - Faile...
FAILED http_tests/user_tests/test_user_profile_setemail.py::test_successful_email_change
FAILED http_tests/user_tests/test_user_profile_setemail.py::test_invalid_token
FAILED http_tests/user_tests/test_user_profile_sethandle.py::test_successful_handle_change
FAILED http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[new handle]
FAILED http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[newh@ndle]
FAILED http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_token
FAILED http_tests/user_tests/test_user_profile_setname.py::test_user_profile_setname_valid_name
FAILED http_tests/user_tests/test_user_profile_setname.py::test_invalid_token
================= 82 failed, 124 passed, 150 skipped in 9.80s ==================
