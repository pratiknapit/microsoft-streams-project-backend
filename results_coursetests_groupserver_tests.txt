============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.2.5, py-1.10.0, pluggy-1.0.0 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/tmp_amd/kamen/export/kamen/3/cs1531/project-automarking/tempstore/.hypothesis/examples')
rootdir: /tmp_amd/kamen/export/kamen/3/cs1531/project-automarking/tempstore, configfile: pytest.ini
plugins: forked-1.3.0, xdist-2.2.1, hypothesis-6.1.1, timeout-1.4.2
collecting ... collected 359 items

http_tests/admin_tests/test_admin_user_remove.py::test_once_removed_user_cant_do_anything FAILED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_messages_after_user_removal_correct_format PASSED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_removed_profile_still_fetchable_with_user_profile FAILED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_channel PASSED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_dm PASSED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_not_in_users_all FAILED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_email_reusable FAILED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_handle_reusable FAILED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_invalid_user PASSED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_last_owner PASSED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_user_nonowner FAILED [  3%]
http_tests/admin_tests/test_admin_user_remove.py::test_invalid_token PASSED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_successful_permission_change PASSED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_cannot_demote_last_owner FAILED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_nonowner_cant_change_permissions PASSED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_user PASSED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_permission PASSED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_token PASSED [  5%]
http_tests/auth_tests/test_auth_login.py::test_successful_login PASSED   [  5%]
http_tests/auth_tests/test_auth_login.py::test_can_have_two_sessions FAILED [  5%]
http_tests/auth_tests/test_auth_login.py::test_unregistered_user PASSED  [  5%]
http_tests/auth_tests/test_auth_login.py::test_registered_but_incorrect_password PASSED [  6%]
http_tests/auth_tests/test_auth_logout.py::test_successful_logout PASSED [  6%]
http_tests/auth_tests/test_auth_logout.py::test_accesserror_when_already_logged_out PASSED [  6%]
http_tests/auth_tests/test_auth_register.py::test_invalid_email[@gmail.com] PASSED [  6%]
http_tests/auth_tests/test_auth_register.py::test_invalid_email[bob] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_email[bob@bob@bob.com] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_password[12345] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_password[] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_first[] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_first[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_last[] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_name_last[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_email PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_removed_user_name PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_successful_registration PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_basic_handle_generated_correctly[Bob-Smith-bobsmith] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_basic_handle_generated_correctly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] PASSED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] FAILED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[abc-def0-abcdef0-abc-def-abcdef1] PASSED [ 11%]
http_tests/auth_tests/test_passwordreset_request.py::test_return_format_correct FAILED [ 11%]
http_tests/auth_tests/test_passwordreset_request.py::test_password_request_logs_out_everywhere FAILED [ 12%]
http_tests/auth_tests/test_passwordreset_reset.py::test_invalid_password PASSED [ 12%]
http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_can_addowner_when_member PASSED [ 12%]
http_tests/channel_tests/test_channel_addowner.py::test_global_owner_member_can_addowner PASSED [ 13%]
http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_cant_addowner_when_non_member PASSED [ 13%]
http_tests/channel_tests/test_channel_addowner.py::test_non_member_cannot_add_owner FAILED [ 13%]
http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_cant_addowner_private FAILED [ 13%]
http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_cant_addowner_public FAILED [ 14%]
http_tests/channel_tests/test_channel_addowner.py::test_member_cannot_add_owner PASSED [ 14%]
http_tests/channel_tests/test_channel_addowner.py::test_cannot_addowner_prexisting_channel_owner PASSED [ 14%]
http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_u_id PASSED [ 15%]
http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_channel_id PASSED [ 15%]
http_tests/channel_tests/test_channel_addowner.py::test_invalid_token FAILED [ 15%]
http_tests/channel_tests/test_channel_details.py::test_member_successful PASSED [ 15%]
http_tests/channel_tests/test_channel_details.py::test_non_member_not_successful PASSED [ 16%]
http_tests/channel_tests/test_channel_details.py::test_invalid_channel_id PASSED [ 16%]
http_tests/channel_tests/test_channel_details.py::test_invalid_token FAILED [ 16%]
http_tests/channel_tests/test_channel_invite.py::test_duplicate_invite PASSED [ 16%]
http_tests/channel_tests/test_channel_invite.py::test_invite_global_owner PASSED [ 17%]
http_tests/channel_tests/test_channel_invite.py::test_invite_global_member PASSED [ 17%]
http_tests/channel_tests/test_channel_invite.py::test_invitation_from_non_channel_member PASSED [ 17%]
http_tests/channel_tests/test_channel_invite.py::test_channel_id_invalid PASSED [ 18%]
http_tests/channel_tests/test_channel_invite.py::test_u_id_invalid FAILED [ 18%]
http_tests/channel_tests/test_channel_invite.py::test_invalidated_token FAILED [ 18%]
http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_public PASSED [ 18%]
http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_private PASSED [ 19%]
http_tests/channel_tests/test_channel_join.py::test_global_member_join_public PASSED [ 19%]
http_tests/channel_tests/test_channel_join.py::test_global_member_cant_join_private PASSED [ 19%]
http_tests/channel_tests/test_channel_join.py::test_already_joined_channel PASSED [ 20%]
http_tests/channel_tests/test_channel_join.py::test_join_invalid_channel_id PASSED [ 20%]
http_tests/channel_tests/test_channel_join.py::test_invalidated_token FAILED [ 20%]
http_tests/channel_tests/test_channel_leave.py::test_member_leave_channel_successfully PASSED [ 20%]
http_tests/channel_tests/test_channel_leave.py::test_leave_channel_when_not_member PASSED [ 21%]
http_tests/channel_tests/test_channel_leave.py::test_invalid_channel_id PASSED [ 21%]
http_tests/channel_tests/test_channel_leave.py::test_invalid_token FAILED [ 21%]
http_tests/channel_tests/test_channel_messages.py::test_message_timestamp FAILED [ 22%]
http_tests/channel_tests/test_channel_messages.py::test_under_fifty_messages_sent PASSED [ 22%]
http_tests/channel_tests/test_channel_messages.py::test_over_fifty_messages_sent FAILED [ 22%]
http_tests/channel_tests/test_channel_messages.py::test_removal_by_edit_reflected PASSED [ 22%]
http_tests/channel_tests/test_channel_messages.py::test_removal_by_deletion_reflected PASSED [ 23%]
http_tests/channel_tests/test_channel_messages.py::test_input_error_when_start_greater_than_message_num PASSED [ 23%]
http_tests/channel_tests/test_channel_messages.py::test_access_error_when_user_is_non_member PASSED [ 23%]
http_tests/channel_tests/test_channel_messages.py::test_input_error_when_channel_id_invalid PASSED [ 23%]
http_tests/channel_tests/test_channel_messages.py::test_access_error_when_invalid_token_given FAILED [ 24%]
http_tests/channel_tests/test_channel_removeowner.py::test_owner_can_remove_owner PASSED [ 24%]
http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_member_can_remove_owner PASSED [ 24%]
http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_nonmember_cannot_remove_owner FAILED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_nonmember_cannot_remove_owner FAILED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_member_cannot_remove_owner FAILED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_last_owner PASSED [ 25%]
http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_cannot_remove_only_owner PASSED [ 26%]
http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_non_owner PASSED [ 26%]
http_tests/channel_tests/test_channel_removeowner.py::test_invalid_u_id PASSED [ 26%]
http_tests/channel_tests/test_channel_removeowner.py::test_with_invalid_channel_id PASSED [ 27%]
http_tests/channel_tests/test_channel_removeowner.py::test_invalidated_token FAILED [ 27%]
http_tests/channels_tests/test_channels_create.py::test_create_channel[True-andys room] PASSED [ 27%]
http_tests/channels_tests/test_channels_create.py::test_create_channel[False-andys room] PASSED [ 27%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[True-] PASSED [ 28%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 28%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[False-] PASSED [ 28%]
http_tests/channels_tests/test_channels_create.py::test_invalid_channel_name_length[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 28%]
http_tests/channels_tests/test_channels_create.py::test_invalidated_token FAILED [ 29%]
http_tests/channels_tests/test_channels_list.py::test_when_in_no_channels PASSED [ 29%]
http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[True-andy] PASSED [ 29%]
http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[False-andy] PASSED [ 30%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-True-ZERG-andy] PASSED [ 30%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-False-ZERG-andy] PASSED [ 30%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-True-ZERG-andy] PASSED [ 30%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-False-ZERG-andy] PASSED [ 31%]
http_tests/channels_tests/test_channels_list.py::test_list_after_leave_channel PASSED [ 31%]
http_tests/channels_tests/test_channels_list.py::test_invalidated_token FAILED [ 31%]
http_tests/channels_tests/test_channels_listall.py::test_when_no_channels PASSED [ 32%]
http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_private PASSED [ 32%]
http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_public PASSED [ 32%]
http_tests/channels_tests/test_channels_listall.py::test_when_multiple_channels_exist PASSED [ 32%]
http_tests/channels_tests/test_channels_listall.py::test_invalidated_token FAILED [ 33%]
http_tests/dm_tests/test_dm_create.py::test_successful_dm_creation PASSED [ 33%]
http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_single PASSED [ 33%]
http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_multiple FAILED [ 33%]
http_tests/dm_tests/test_dm_create.py::test_dm_to_invalid_users PASSED   [ 34%]
http_tests/dm_tests/test_dm_create.py::test_dm_to_users_but_one_invalid PASSED [ 34%]
http_tests/dm_tests/test_dm_create.py::test_invalid_token PASSED         [ 34%]
http_tests/dm_tests/test_dm_details.py::test_member_successful PASSED    [ 35%]
http_tests/dm_tests/test_dm_details.py::test_non_member_not_successful PASSED [ 35%]
http_tests/dm_tests/test_dm_details.py::test_invalid_dm_id PASSED        [ 35%]
http_tests/dm_tests/test_dm_details.py::test_invalid_token PASSED        [ 35%]
http_tests/dm_tests/test_dm_leave.py::test_member_leave_dm_successfully PASSED [ 36%]
http_tests/dm_tests/test_dm_leave.py::test_leave_dm_when_not_member PASSED [ 36%]
http_tests/dm_tests/test_dm_leave.py::test_invalid_dm_id PASSED          [ 36%]
http_tests/dm_tests/test_dm_leave.py::test_invalid_token PASSED          [ 37%]
http_tests/dm_tests/test_dm_list.py::test_when_in_no_dms PASSED          [ 37%]
http_tests/dm_tests/test_dm_list.py::test_when_in_one_dm PASSED          [ 37%]
http_tests/dm_tests/test_dm_list.py::test_when_in_multiple_dms PASSED    [ 37%]
http_tests/dm_tests/test_dm_list.py::test_list_after_leave_dm PASSED     [ 38%]
http_tests/dm_tests/test_dm_list.py::test_invalidated_token PASSED       [ 38%]
http_tests/dm_tests/test_dm_messages.py::test_under_fifty_messages_sent PASSED [ 38%]
http_tests/dm_tests/test_dm_messages.py::test_over_fifty_messages_sent FAILED [ 38%]
http_tests/dm_tests/test_dm_messages.py::test_removal_by_edit_reflected FAILED [ 39%]
http_tests/dm_tests/test_dm_messages.py::test_removal_by_deletion_reflected PASSED [ 39%]
http_tests/dm_tests/test_dm_messages.py::test_input_error_when_start_greater_than_message_num PASSED [ 39%]
http_tests/dm_tests/test_dm_messages.py::test_access_error_when_user_is_non_member PASSED [ 40%]
http_tests/dm_tests/test_dm_messages.py::test_input_error_when_dm_id_invalid PASSED [ 40%]
http_tests/dm_tests/test_dm_messages.py::test_access_error_when_invalid_token_given PASSED [ 40%]
http_tests/dm_tests/test_dm_remove.py::test_successful_dm_removal FAILED [ 40%]
http_tests/dm_tests/test_dm_remove.py::test_removal_removes_messages FAILED [ 41%]
http_tests/dm_tests/test_dm_remove.py::test_nonowner_cannot_remove_dm PASSED [ 41%]
http_tests/dm_tests/test_dm_remove.py::test_invalid_dm_id FAILED         [ 41%]
http_tests/dm_tests/test_dm_remove.py::test_invalid_token PASSED         [ 42%]
http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message_channel PASSED [ 42%]
http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message_dm PASSED [ 42%]
http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message_channel PASSED [ 42%]
http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message_dm PASSED [ 43%]
http_tests/message_tests/test_message_edit.py::test_global_owner_can_edit_members_message_channel PASSED [ 43%]
http_tests/message_tests/test_message_edit.py::test_global_owner_cant_edit_members_message_dm FAILED [ 43%]
http_tests/message_tests/test_message_edit.py::test_empty_edit_deletes_message PASSED [ 44%]
http_tests/message_tests/test_message_edit.py::test_invalid_message_length PASSED [ 44%]
http_tests/message_tests/test_message_edit.py::test_cannot_edit_deleted_message PASSED [ 44%]
http_tests/message_tests/test_message_edit.py::test_nonowner_nonposter_cant_edit PASSED [ 44%]
http_tests/message_tests/test_message_edit.py::test_invalid_token PASSED [ 45%]
http_tests/message_tests/test_message_meta.py::test_message_ids_unique FAILED [ 45%]
http_tests/message_tests/test_message_meta.py::test_message_ids_unique_iter3 FAILED [ 45%]
http_tests/message_tests/test_message_pin.py::test_successful_pin_channel_owner_in_channel PASSED [ 45%]
http_tests/message_tests/test_message_pin.py::test_successful_pin_dm_owner_in_dm PASSED [ 46%]
http_tests/message_tests/test_message_pin.py::test_successful_pin_global_owner_in_channel FAILED [ 46%]
http_tests/message_tests/test_message_pin.py::test_invalid_message_id PASSED [ 46%]
http_tests/message_tests/test_message_pin.py::test_cannot_pin_twice PASSED [ 47%]
http_tests/message_tests/test_message_pin.py::test_channel_member_cant_pin PASSED [ 47%]
http_tests/message_tests/test_message_pin.py::test_dm_member_cant_pin PASSED [ 47%]
http_tests/message_tests/test_message_pin.py::test_global_owner_cant_pin_in_dm PASSED [ 47%]
http_tests/message_tests/test_message_pin.py::test_nonmember_cant_pin FAILED [ 48%]
http_tests/message_tests/test_message_pin.py::test_invalid_token PASSED  [ 48%]
http_tests/message_tests/test_message_react.py::test_successful_react_in_channel FAILED [ 48%]
http_tests/message_tests/test_message_react.py::test_successful_react_to_dm_message FAILED [ 49%]
http_tests/message_tests/test_message_react.py::test_invalid_message_id PASSED [ 49%]
http_tests/message_tests/test_message_react.py::test_invalid_react_id PASSED [ 49%]
http_tests/message_tests/test_message_react.py::test_cant_react_twice PASSED [ 49%]
http_tests/message_tests/test_message_react.py::test_nonmember_cannot_react FAILED [ 50%]
http_tests/message_tests/test_message_react.py::test_invalid_token PASSED [ 50%]
http_tests/message_tests/test_message_remove.py::test_original_poster_can_remove_message PASSED [ 50%]
http_tests/message_tests/test_message_remove.py::test_owner_can_remove_members_message PASSED [ 50%]
http_tests/message_tests/test_message_remove.py::test_global_owner_can_remove_members_message_channel FAILED [ 51%]
http_tests/message_tests/test_message_remove.py::test_global_owner_cant_remove_members_message_dm PASSED [ 51%]
http_tests/message_tests/test_message_remove.py::test_cannot_remove_deleted_message PASSED [ 51%]
http_tests/message_tests/test_message_remove.py::test_nonowner_nonposter_cant_remove_message PASSED [ 52%]
http_tests/message_tests/test_message_remove.py::test_invalid_token PASSED [ 52%]
http_tests/message_tests/test_message_send.py::test_valid_message PASSED [ 52%]
http_tests/message_tests/test_message_send.py::test_nonmember_post PASSED [ 52%]
http_tests/message_tests/test_message_send.py::test_invalid_channel PASSED [ 53%]
http_tests/message_tests/test_message_send.py::test_invalid_message[] PASSED [ 53%]
http_tests/message_tests/test_message_send.py::test_invalid_message[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 53%]
http_tests/message_tests/test_message_send.py::test_invalid_token FAILED [ 54%]
http_tests/message_tests/test_message_senddm.py::test_valid_message PASSED [ 54%]
http_tests/message_tests/test_message_senddm.py::test_nonmember_post PASSED [ 54%]
http_tests/message_tests/test_message_senddm.py::test_invalid_dm PASSED  [ 54%]
http_tests/message_tests/test_message_senddm.py::test_invalid_message[] PASSED [ 55%]
http_tests/message_tests/test_message_senddm.py::test_invalid_message[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 55%]
http_tests/message_tests/test_message_senddm.py::test_invalid_token PASSED [ 55%]
http_tests/message_tests/test_message_sendlater.py::test_valid_future_message FAILED [ 55%]
http_tests/message_tests/test_message_sendlater.py::test_returns_immediately FAILED [ 56%]
http_tests/message_tests/test_message_sendlater.py::test_nonmember_cannot_sendlater PASSED [ 56%]
http_tests/message_tests/test_message_sendlater.py::test_cannot_time_travel_aka_send_message_in_past PASSED [ 56%]
http_tests/message_tests/test_message_sendlater.py::test_message_too_long PASSED [ 57%]
http_tests/message_tests/test_message_sendlater.py::test_invalid_channel PASSED [ 57%]
http_tests/message_tests/test_message_sendlater.py::test_invalid_token PASSED [ 57%]
http_tests/message_tests/test_message_sendlaterdm.py::test_valid_future_message FAILED [ 57%]
http_tests/message_tests/test_message_sendlaterdm.py::test_returns_immediately FAILED [ 58%]
http_tests/message_tests/test_message_sendlaterdm.py::test_nonmember_cannot_sendlater PASSED [ 58%]
http_tests/message_tests/test_message_sendlaterdm.py::test_cannot_time_travel_aka_send_message_in_past PASSED [ 58%]
http_tests/message_tests/test_message_sendlaterdm.py::test_message_too_long PASSED [ 59%]
http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_dm PASSED [ 59%]
http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_token PASSED [ 59%]
http_tests/message_tests/test_message_share.py::test_successful_share_to_channel FAILED [ 59%]
http_tests/message_tests/test_message_share.py::test_successful_share_to_dm FAILED [ 60%]
http_tests/message_tests/test_message_share.py::test_successful_cross_share[True] FAILED [ 60%]
http_tests/message_tests/test_message_share.py::test_successful_cross_share[False] FAILED [ 60%]
http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_dm FAILED [ 61%]
http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_channel PASSED [ 61%]
http_tests/message_tests/test_message_share.py::test_cannot_share_from_unjoined_channel FAILED [ 61%]
http_tests/message_tests/test_message_share.py::test_cannot_share_from_unjoined_dm FAILED [ 61%]
http_tests/message_tests/test_message_share.py::test_invalid_og_message_id FAILED [ 62%]
http_tests/message_tests/test_message_share.py::test_invalid_message_length PASSED [ 62%]
http_tests/message_tests/test_message_share.py::test_share_to_invalid_channel_id PASSED [ 62%]
http_tests/message_tests/test_message_share.py::test_share_to_invalid_dm_id PASSED [ 62%]
http_tests/message_tests/test_message_share.py::test_invalid_token PASSED [ 63%]
http_tests/message_tests/test_message_unpin.py::test_successful_unpin_channel_owner_in_channel PASSED [ 63%]
http_tests/message_tests/test_message_unpin.py::test_successful_unpin_dm_owner_in_dm PASSED [ 63%]
http_tests/message_tests/test_message_unpin.py::test_successful_unpin_global_owner_in_channel FAILED [ 64%]
http_tests/message_tests/test_message_unpin.py::test_invalid_message_id PASSED [ 64%]
http_tests/message_tests/test_message_unpin.py::test_cannot_unpin_twice PASSED [ 64%]
http_tests/message_tests/test_message_unpin.py::test_channel_member_cant_unpin PASSED [ 64%]
http_tests/message_tests/test_message_unpin.py::test_dm_member_cant_unpin PASSED [ 65%]
http_tests/message_tests/test_message_unpin.py::test_global_owner_cant_unpin_in_dm PASSED [ 65%]
http_tests/message_tests/test_message_unpin.py::test_nonmember_cant_unpin FAILED [ 65%]
http_tests/message_tests/test_message_unpin.py::test_invalid_token PASSED [ 66%]
http_tests/message_tests/test_message_unreact.py::test_successful_unreact_in_channel FAILED [ 66%]
http_tests/message_tests/test_message_unreact.py::test_successful_unreact_to_dm_message FAILED [ 66%]
http_tests/message_tests/test_message_unreact.py::test_invalid_message_id PASSED [ 66%]
http_tests/message_tests/test_message_unreact.py::test_invalid_react_id PASSED [ 67%]
http_tests/message_tests/test_message_unreact.py::test_cant_unreact_twice FAILED [ 67%]
http_tests/message_tests/test_message_unreact.py::test_nonmember_cannot_unreact FAILED [ 67%]
http_tests/message_tests/test_message_unreact.py::test_invalid_token PASSED [ 67%]
http_tests/other_tests/test_clear.py::test_clear_works FAILED            [ 68%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_send_triggers_notification FAILED [ 68%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_senddm_triggers_notification FAILED [ 68%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_edit_triggers_notification FAILED [ 69%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_share_triggers_notification FAILED [ 69%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlater_triggers_notification FAILED [ 69%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlaterdm_triggers_notification FAILED [ 69%]
http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[a small message] FAILED [ 70%]
http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] FAILED [ 70%]
http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[ch] PASSED [ 70%]
http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[dm] FAILED [ 71%]
http_tests/other_tests/test_notifications_get.py::test_add_thru_ch_invite_triggers_notification PASSED [ 71%]
http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_create_triggers_notification FAILED [ 71%]
http_tests/other_tests/test_notifications_get.py::test_most_recent_20_notifications_fetched FAILED [ 71%]
http_tests/other_tests/test_notifications_get.py::test_invalid_token PASSED [ 72%]
http_tests/other_tests/test_search.py::test_no_matches FAILED            [ 72%]
http_tests/other_tests/test_search.py::test_single_match FAILED          [ 72%]
http_tests/other_tests/test_search.py::test_multiple_matches FAILED      [ 72%]
http_tests/other_tests/test_search.py::test_multiple_channels_joined FAILED [ 73%]
http_tests/other_tests/test_search.py::test_search_includes_only_joined_channels FAILED [ 73%]
http_tests/other_tests/test_search.py::test_search_matches_more_than_just_authorised_user FAILED [ 73%]
http_tests/other_tests/test_search.py::test_invalid_search[] FAILED      [ 74%]
http_tests/other_tests/test_search.py::test_invalid_search[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] FAILED [ 74%]
http_tests/other_tests/test_search.py::test_invalid_token FAILED         [ 74%]
http_tests/other_tests/test_users_all.py::test_successful_users_all PASSED [ 74%]
http_tests/other_tests/test_users_all.py::test_invalid_token PASSED      [ 75%]
http_tests/standup_tests/test_standup_active.py::test_correct_return_format[True] FAILED [ 75%]
http_tests/standup_tests/test_standup_active.py::test_correct_return_format[False] PASSED [ 75%]
http_tests/standup_tests/test_standup_active.py::test_active_standup PASSED [ 76%]
http_tests/standup_tests/test_standup_active.py::test_inactive_standup PASSED [ 76%]
http_tests/standup_tests/test_standup_active.py::test_invalid_channel_id PASSED [ 76%]
http_tests/standup_tests/test_standup_active.py::test_invalid_token PASSED [ 76%]
http_tests/standup_tests/test_standup_send.py::test_messages_buffered_and_displayed_correctly FAILED [ 77%]
http_tests/standup_tests/test_standup_send.py::test_return_format PASSED [ 77%]
http_tests/standup_tests/test_standup_send.py::test_non_member_cannot_standup_send FAILED [ 77%]
http_tests/standup_tests/test_standup_send.py::test_send_when_standup_inactive PASSED [ 77%]
http_tests/standup_tests/test_standup_send.py::test_invalid_message_length PASSED [ 78%]
http_tests/standup_tests/test_standup_send.py::test_invalid_channel_id PASSED [ 78%]
http_tests/standup_tests/test_standup_send.py::test_invalid_token PASSED [ 78%]
http_tests/standup_tests/test_standup_start.py::test_standup_start_return_format FAILED [ 79%]
http_tests/standup_tests/test_standup_start.py::test_returns_immediately PASSED [ 79%]
http_tests/standup_tests/test_standup_start.py::test_standup_restartable_after_lapse PASSED [ 79%]
http_tests/standup_tests/test_standup_start.py::test_standup_affects_only_one_channel PASSED [ 79%]
http_tests/standup_tests/test_standup_start.py::test_nonmember_cannot_start_standup PASSED [ 80%]
http_tests/standup_tests/test_standup_start.py::test_cannot_start_standup_when_already_active PASSED [ 80%]
http_tests/standup_tests/test_standup_start.py::test_invalid_standup_length PASSED [ 80%]
http_tests/standup_tests/test_standup_start.py::test_invalid_channel_id PASSED [ 81%]
http_tests/standup_tests/test_standup_start.py::test_invalid_token PASSED [ 81%]
http_tests/stats_tests/test_user_stats.py::test_return_type_correct PASSED [ 81%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channels_create PASSED [ 81%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_join PASSED [ 82%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_invite PASSED [ 82%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_leave PASSED [ 82%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_create PASSED [ 83%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_leave PASSED [ 83%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_remove PASSED [ 83%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_send PASSED [ 83%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_sendlater FAILED [ 84%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddm PASSED [ 84%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddmlater FAILED [ 84%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_share PASSED [ 84%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_standup_finish PASSED [ 85%]
http_tests/stats_tests/test_user_stats.py::test_involvement_tracked FAILED [ 85%]
http_tests/stats_tests/test_user_stats.py::test_invalid_token PASSED     [ 85%]
http_tests/stats_tests/test_users_stats.py::test_return_type_correct FAILED [ 86%]
http_tests/stats_tests/test_users_stats.py::test_channels_tracked_channels_create FAILED [ 86%]
http_tests/stats_tests/test_users_stats.py::test_dms_tracked_dm_create FAILED [ 86%]
http_tests/stats_tests/test_users_stats.py::test_dms_tracked_dm_remove FAILED [ 86%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_send FAILED [ 87%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_sendlater FAILED [ 87%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_senddm FAILED [ 87%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_senddmlater FAILED [ 88%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_share FAILED [ 88%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_standup_finish FAILED [ 88%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_edited_to_removal FAILED [ 88%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_deleted FAILED [ 89%]
http_tests/stats_tests/test_users_stats.py::test_messages_tracked_dm_removed FAILED [ 89%]
http_tests/stats_tests/test_users_stats.py::test_utilization_tracked PASSED [ 89%]
http_tests/stats_tests/test_users_stats.py::test_invalid_token FAILED    [ 89%]
http_tests/user_tests/test_user_profile.py::test_user_profile_valid PASSED [ 90%]
http_tests/user_tests/test_user_profile.py::test_invalid_user PASSED     [ 90%]
http_tests/user_tests/test_user_profile.py::test_invalid_token PASSED    [ 90%]
http_tests/user_tests/test_user_profile_setemail.py::test_successful_email_change FAILED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_cannot_change_to_taken_email PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[] PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[bob] PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab.com] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[@gmail.com] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab@ab@gmail.com] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_token PASSED [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_successful_handle_change FAILED [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_cannot_change_to_taken_handle PASSED [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[] PASSED [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[a] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aa] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aaaaaaaaaaaaaaaaaaaaa] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[new handle] FAILED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[newh@ndle] FAILED [ 95%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_token PASSED [ 95%]
http_tests/user_tests/test_user_profile_setname.py::test_user_profile_setname_valid_name FAILED [ 95%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_token PASSED [ 97%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_return_format_correct PASSED [ 97%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_cannot_upload_non_jpeg FAILED [ 97%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[-1000-0-0-0] PASSED [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0--1000-0-0] PASSED [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0-0--1000-0] PASSED [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0-0-0--1000] PASSED [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_x_end_less_than_start_value PASSED [ 99%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_y_end_less_than_start_value PASSED [ 99%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_url PASSED [ 99%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_token PASSED [100%]

====== Marks recorded: 123.14 ======


=================================== FAILURES ===================================
___________________ test_once_removed_user_cant_do_anything ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zNiLWZmOTktNDllYy1iMzg3LTNmNDcxMWYxN2M0M1wiIn0.WHUx2HEe_Om-hLzWJ9r1XYdWOCMkvxKkGuqCLxRqWKg', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...WE3MTAwLTc1OTYtNGRlMi04YWY3LTE0YTYwMmVlZWZlYlwiIn0.zUNeQLIc2BeJ_p265SZzs2v3j0s62Ziz55Uf4CUyXwM', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_once_removed_user_cant_do_anything(user_woody, user_zerg, woodys_public_toybox, ctx):
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
        with pytest.raises(AccessError):
>           auth_logout(user_zerg.token, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/admin_tests/test_admin_user_remove.py:22: Failed
____________ test_removed_profile_still_fetchable_with_user_profile ____________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...2JkLTE3OTktNDUwMi05MDg3LTEzY2M3ZDdlMjUwZVwiIn0.wP7sC-sjjEcbXR8je6v4wvGoxkqh6YC2xC5tL_8CXFA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...TZkZDQ0LTlhODctNDk5Mi04NmE3LWYxNTdjNWJiMDY2Y1wiIn0.7a2cMT9HE-y9MXogkf-3SUy8sVQFRjb5NqYGXnsEs9Q', handle_str='lordzerg')
ctx = None

    def test_removed_profile_still_fetchable_with_user_profile(user_woody, user_zerg, ctx):
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
        profile = user_profile(user_woody.token, user_zerg.u_id, ctx)['user']
    
>       assert profile["name_first"] == 'Removed' and profile["name_last"] == 'user'
E       AssertionError: assert ('Removed' == 'Removed'
E           Removed and 'zerg' == 'user'
E         - user
E         + zerg)

http_tests/admin_tests/test_admin_user_remove.py:43: AssertionError
________________________ test_removal_not_in_users_all _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...DY4LTc3NjUtNDYwOC04MTE1LTJhNzQ1YzIwNGM4ZlwiIn0.2NXIx_bBqew56xLrfQ1zuu09bq6WEhdGmNIOK2AQY3Y', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...zg0YTRlLWE2MmItNDkzNS05NzA3LWQzNzczMDFlNzQwZlwiIn0.kRMmcxuj-eEoyCnAVcoaxJ1Ke_GFR20RfixXzB3dksI', handle_str='lordzerg')
ctx = None

    def test_removal_not_in_users_all(user_woody, user_zerg, ctx):
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
        users = users_all(user_woody.token, ctx)['users']
    
>       assert user_zerg.u_id not in [u['u_id'] for u in users]
E       AssertionError: assert 2 not in [1, 2]
E        +  where 2 = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...zg0YTRlLWE2MmItNDkzNS05NzA3LWQzNzczMDFlNzQwZlwiIn0.kRMmcxuj-eEoyCnAVcoaxJ1Ke_GFR20RfixXzB3dksI', handle_str='lordzerg').u_id

http_tests/admin_tests/test_admin_user_remove.py:69: AssertionError
_____________________________ test_email_reusable ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...mM5LWE4M2EtNDc3Yi04NWQ2LWY1YjJmZGRiZWUwY1wiIn0.pxsCNKd0g65oNyAkqW2suB5xMh_jPj16Emm5P18iAGA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...Tc1NTE2LTM2N2UtNDkyMC05OTQ2LWVmZjM4YTg0ZmY4NFwiIn0.dEDTS0JSj6xQV9mLc_UEwUR6M7_shVNmnbvFANjpL7g', handle_str='lordzerg')
ctx = None

    def test_email_reusable(user_woody, user_zerg, ctx):
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
        # shouldn't blow up
>       assert auth_register(user_zerg.email, user_zerg.password, user_zerg.name_first, user_zerg.name_last, ctx) is not None

http_tests/admin_tests/test_admin_user_remove.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:36: in auth_register
    email=email, password=password, name_first=name_first, name_last=name_last
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
_____________________________ test_handle_reusable _____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...mM5LTIzMWMtNDMyMS1hOTlhLThmNWNlNjFmZTlmZVwiIn0.GAFy4wBln6HnCOsxFEVF3C2UxmlWMpBb2b1tNuG_EY0', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...zA0OWRmLWQ3NmQtNDg5Ni05NzE0LTM5ZThiNGY1MzhhMFwiIn0.wbkaQ3kLQJYDSR9lLotVAQujkM-hhdcbmHzVhZrPHVc', handle_str='lordzerg')
ctx = None

    def test_handle_reusable(user_woody, user_zerg, ctx):
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
>       session = auth_register(user_zerg.email, user_zerg.password, user_zerg.name_first, user_zerg.name_last, ctx)

http_tests/admin_tests/test_admin_user_remove.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:36: in auth_register
    email=email, password=password, name_first=name_first, name_last=name_last
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
_______________________ test_cannot_remove_user_nonowner _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zA3LWFiNzUtNGZiZS1hMzYyLTY4NGU2MWJkNGI0ZFwiIn0.uufPDcfYBIWRAK3JC7rGqb7B9rKZ_iWEvy5Ef1nm7fs', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...YxLTFhMDItNGI1Yi1hNzljLWQ2MDJlMmUyMTZiN1wiIn0.-jkymO5VTSZySvzBH59S9ykaQCGc9mi_Rf9LuTfATpU', handle_str='buzzlightyear')
ctx = None

    def test_cannot_remove_user_nonowner(user_woody, user_buzz, ctx):
        with pytest.raises(AccessError):
>           admin_user_remove(user_buzz.token, user_woody.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/admin.py:14: in admin_user_remove
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
________________________ test_cannot_demote_last_owner _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...mJmLWY5OGUtNDk0MS1hYTFiLWRjOWJiNzg0NGZjZlwiIn0.w9r5LgWn3HDjeSifss93YBwWGuRlO064DNrGM_AF5BA', handle_str='sheriffwoody')
ctx = None

    def test_cannot_demote_last_owner(user_woody, ctx):
        with pytest.raises(InputError):
>           admin_userpermission_change(user_woody.token, user_woody.u_id, Permissions.DREAMS_MEMBER, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.InputError'>

http_tests/admin_tests/test_admin_userpermission_change.py:25: Failed
__________________________ test_can_have_two_sessions __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TVlLTM2ZTItNGYwYy1hYTA0LTBlNmVkYWI4OGU5OFwiIn0.EUAiBFxggz-gLN9UMMdlnswVft5m1UbOLQG3w9007Qw', handle_str='sheriffwoody')
ctx = None

    @pytest.mark.overrideMarks(2)
    def test_can_have_two_sessions(user_woody, ctx):
        session2 = auth_login(user_woody.email, user_woody.password, ctx)
    
        # succeeds
        assert user_profile(session2['token'], user_woody.u_id, ctx) == user_profile(user_woody.token, user_woody.u_id, ctx)
    
>       assert auth_logout(session2['token'], ctx) == {}
E       AssertionError: assert {'is_success': True} == {}
E         Left contains 1 more item:
E         {'is_success': True}
E         Full diff:
E         - {}
E         + {'is_success': True}

http_tests/auth_tests/test_auth_login.py:28: AssertionError
_ test_duplicate_handles_generated_correctly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] _

first1 = '@bcdefgh!j', last1 = 'klmn opqrst', handle1 = 'bcdefghjklmnopqrst'
first2 = 'bcdefghj', last2 = 'klmnopqrst', handle2 = 'bcdefghjklmnopqrst0'
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...GQzLTdjMzAtNGJkMC1iMTkxLWNhNThmMTkyZjVmOVwiIn0.JmwN3jlrhvvwbFmOEd5ILfe7aZk9HX4X3_oCZgbRz6M', handle_str='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def test_duplicate_handles_generated_correctly(first1, last1, handle1, first2, last2, handle2, woodys_public_toybox, user_woody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        auth_register('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = auth_register(email1, 'password1', first1, last1, ctx)
>       assert handle1 == user_profile(user1['token'], user1['auth_user_id'], ctx)['user']['handle_str']
E       AssertionError: assert 'bcdefghjklmnopqrst' == '@bcdefgh!jklmn opqrs'
E         - @bcdefgh!jklmn opqrs
E         ? -       -     -
E         + bcdefghjklmnopqrst
E         ?                  +

http_tests/auth_tests/test_auth_register.py:96: AssertionError
__________________________ test_return_format_correct __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jQ2LTdlY2MtNDY4Zi1iY2M2LWZmMGYwNDJjMjQ2ZlwiIn0.vDJVwXRF-oRMS6jBM3UXJJYd99DreozG5_ypQ2JV7Ls', handle_str='sheriffwoody')
ctx = None

    @iteration3
    def test_return_format_correct(user_woody, ctx):
>       assert auth_passwordreset_request(user_woody.email, ctx) == {}
E       AssertionError: assert 'S4I2LW' == {}
E         +'S4I2LW'
E         -{}

http_tests/auth_tests/test_passwordreset_request.py:18: AssertionError
__________________ test_password_request_logs_out_everywhere ___________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jFhLTEzYzItNGJmMi04NjU0LTllYTdmZjk0NzI3Y1wiIn0.V7jQ13q0BiZB4jhLlnZ9M-8CFuZW39b6AXNPO_KK5IE', handle_str='sheriffwoody')
ctx = None

    @iteration3
    def test_password_request_logs_out_everywhere(user_woody, ctx):
        sess2 = auth_login(user_woody.email, user_woody.password, ctx)
    
        auth_passwordreset_request(user_woody.email, ctx)
    
        with pytest.raises(AccessError):
>           users_all(user_woody.token, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/auth_tests/test_passwordreset_request.py:29: Failed
_______________________ test_non_member_cannot_add_owner _______________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...kzLTRlYTktNDI3ZC05YzdiLTcxMTIyMDU3MzA5NlwiIn0.BChOkPunVsgVV_xUt_NEJ91rDuHWp4XUht5Zx67iizM', handle_str='buzzlightyear')
ctx = None

    def test_non_member_cannot_add_owner(woodys_public_toybox, user_buzz, ctx):
        with pytest.raises(AccessError):
>           channel_addowner(user_buzz.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)

http_tests/channel_tests/test_channel_addowner.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:69: in channel_addowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
______________ test_global_owner_non_member_cant_addowner_private ______________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TVmLTFkNzktNGViYS1iNTE0LWU0NzI2NDhmNzNhMlwiIn0.JDL8YKBEEMiBEhXM2uFuEsoYAaGZq2Dc5MlGRhnpcW8', handle_str='sheriffwoody')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[2], all_members=[])
ctx = None

    def test_global_owner_non_member_cant_addowner_private(user_woody, zergs_private_lair, ctx):
        with pytest.raises(AccessError):
>           channel_addowner(user_woody.token, zergs_private_lair.channel_id, user_woody.u_id, ctx)

http_tests/channel_tests/test_channel_addowner.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:69: in channel_addowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
______________ test_global_owner_non_member_cant_addowner_public _______________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...M5LWU0ZDctNGIxNy1iMjY2LWM0ZTc1N2NmNTQ1MlwiIn0.j1zYP3w73VkJyO2lKjjfiOkKUuXdDSpA4C3hG0JehyM', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
ctx = None

    def test_global_owner_non_member_cant_addowner_public(user_buzz, woodys_public_toybox, ctx):
        with pytest.raises(AccessError):
>           channel_addowner(user_buzz.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)

http_tests/channel_tests/test_channel_addowner.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:69: in channel_addowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...2QyLWQ4NDAtNGYxZi1hNzcwLWMxZTkzNGI5OTQxYlwiIn0.rEbzl00QNUBnWWTHBd8GnzT4_lxfCheO3MX-9HkkcoU', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...VjLTBjOGQtNGNiZS05YWQ4LThkMTkwZGVmNTYwM1wiIn0.ygfmeJSwDxZ2qhbgh2LTp3y1tNQ8_FU575WyoCcrY4o', handle_str='buzzlightyear')
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, user_buzz, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_addowner(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)

http_tests/channel_tests/test_channel_addowner.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:69: in channel_addowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jAzLTI4MWUtNDUwNC04YTI5LWVmMjMxMjhhMjE0OFwiIn0.RUcb-UGl_AgbingGJC81As1WrZqAS84Joxv-WUDRv8U', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_details(user_woody.token, woodys_public_toybox.channel_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/channel_tests/test_channel_details.py:46: Failed
______________________________ test_u_id_invalid _______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zY1LTQzN2MtNDUwYS1hMmFlLWRkOGUxNTNiM2RhM1wiIn0.8vf0_NVlcVeeDpcGLzYBk1NjFQGvXhn8lMZNnwp2NYI', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_u_id_invalid(user_woody, woodys_public_toybox, ctx):
        with pytest.raises(InputError):
>           channel_invite(user_woody.token, woodys_public_toybox.channel_id, -1, ctx)

http_tests/channel_tests/test_channel_invite.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:14: in channel_invite
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zQ5LWVlN2EtNDk1Yi04ZGJmLWM0ZmNlYzBlZGYxOFwiIn0.umM-DO0sJ8Ypne56jFJV97PMBgMivSd1dKfGrWZDyWM', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...I2LTJiY2QtNDQyNy1hMTE5LTY5ZjBiZWQyZWVkNVwiIn0.dFKCFtrS1kKDtROK5MNjm170lBRYZEbZS4xEW0AIc0s', handle_str='buzzlightyear')
ctx = None

    def test_invalidated_token(user_woody, woodys_public_toybox, user_buzz, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/channel_tests/test_channel_invite.py:58: Failed
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zVlLWY1NGMtNDdjNi05ZGQ4LTAyMmFlNGEyYjEzYVwiIn0.z_AgAK1eMaW7KnMKBkyVyucWQlVziLSX5mx0JBIZhSM', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_invalidated_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_join(user_woody.token, woodys_public_toybox.channel_id, ctx)

http_tests/channel_tests/test_channel_join.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:58: in channel_join
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...DEwLWM0ZTYtNGQ0Yi04YjZjLWFmMjM4NDlkZWM0NFwiIn0.SkC6kgUfMbC2YinYpdwwfCKsEbYiYzdGDRvSvaLLItM', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_leave(user_woody.token, woodys_public_toybox.channel_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/channel_tests/test_channel_leave.py:35: Failed
____________________________ test_message_timestamp ____________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zYyLWQ0ZGItNDBjNC1hMTY4LWQwMTAxNDAxZWMwNFwiIn0.cOhCKCqdDEKg2IEV8fcL_WZUcGXTmXyDodGNBavZa8k', handle_str='sheriffwoody')
ctx = None

    def test_message_timestamp(woodys_public_toybox, user_woody, ctx):
        expected_time = utc_now()
        message_send(user_woody.token, woodys_public_toybox.channel_id, 'you are a toy', ctx)
        ch_msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
>       assert abs(ch_msgs['messages'][0]['time_created'] - expected_time) <= 2
E       assert 39600.27759194374 <= 2
E        +  where 39600.27759194374 = abs((1637007978.277592 - 1636968378))

http_tests/channel_tests/test_channel_messages.py:19: AssertionError
________________________ test_over_fifty_messages_sent _________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jllLTk0YzAtNDhhYi1hMDE3LTI3YjA4YWY3ZjYwYVwiIn0.TupXJUUC7s-raAvWwY6WLXAEW1zefeiyc9hoDBHBs-k', handle_str='sheriffwoody')
ctx = None

    def test_over_fifty_messages_sent(woodys_public_toybox, user_woody, ctx):
        message_ids = [
            message_send(user_woody.token, woodys_public_toybox.channel_id, 'you are a toy', ctx)['message_id'] for x in
            range(51)
        ]
        message_ids.reverse()
    
        ch_msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
        assert ch_msgs['start'] == 0
>       assert ch_msgs['end'] == 50
E       assert -1 == 50
E         +-1
E         -50

http_tests/channel_tests/test_channel_messages.py:43: AssertionError
__________________ test_access_error_when_invalid_token_given __________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...DdjLWI1MjYtNDA2NC1hNTVkLTkxMDkxN2Q0ZmJlNFwiIn0.01FoPpJCjstSQDfKXCATNsdZVU_3EEowgWtu2ceEBCU', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_access_error_when_invalid_token_given(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/channel_tests/test_channel_messages.py:100: Failed
_______________ test_global_owner_nonmember_cannot_remove_owner ________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...TQ0MTU0LWZhNmQtNDY0OS04YmU0LTNmNDNhOWNjYzhkYVwiIn0.mktE-5-conqssgLnXIaudxwltRMYR8gt1DvDyzwc0R0', handle_str='lordzerg')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...zEzLTkxMDctNGI3MC04ZmM5LTQxOTY1ZTFmY2RiZVwiIn0.LEupOQI5wKktZUnuC2lm8wIuS17MxQBuiVpNAwmbEKw', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=3, to...M5LWVmNDYtNDk5OS04OGQ5LTg4NWU1YmFiNzYzZVwiIn0.BBuQfgFDFrdX0det-4eNXN83eEq4yncxzCo9xSx-NFw', handle_str='buzzlightyear')
ctx = None

    def test_global_owner_nonmember_cannot_remove_owner(user_zerg, user_woody, woodys_public_toybox, user_buzz, ctx):
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        channel_addowner(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        with pytest.raises(AccessError):
>           channel_removeowner(user_zerg.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/channel_tests/test_channel_removeowner.py:46: Failed
______________________ test_nonmember_cannot_remove_owner ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jNhLTdhMjktNDc1My05ZjEyLTdiZTlmZjc3MTgxN1wiIn0.5WDoQ_gqGs96oZ4_DVgwI5oqlUDoTcLO7XopvLdOr3A', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...liLTc5NTQtNDg5MC1hZTkwLTAyYWViODc3MmQ3YVwiIn0.SAVvZ9NJl7xQvcM0FQ-Kvjc6Vh1MIcHigODNGHRDmrQ', handle_str='buzzlightyear')
ctx = None

    def test_nonmember_cannot_remove_owner(user_woody, woodys_public_toybox, user_buzz, ctx):
        with pytest.raises(AccessError):
>           channel_removeowner(user_buzz.token, woodys_public_toybox.channel_id, user_woody.u_id, ctx)

http_tests/channel_tests/test_channel_removeowner.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:80: in channel_removeowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
_______________________ test_member_cannot_remove_owner ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TNkLWQ2NTItNDhkYi1iMjkyLTljM2FiNDAzYzAxN1wiIn0.YeDLwRIF0ttjKXHo2elwbqnlq-wPsKQ79394U5gq1M8', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...UwLTA0MjYtNGNhYy05YjUyLTQ0ZmRmZDZmZTU0MlwiIn0.e6th4RUVHaz-3tUnyyQ4z3eZpOUNJuRXRobnipgX7OM', handle_str='buzzlightyear')
ctx = None

    def test_member_cannot_remove_owner(user_woody, woodys_public_toybox, user_buzz, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
        with pytest.raises(AccessError):
>           channel_removeowner(user_buzz.token, woodys_public_toybox.channel_id, user_woody.u_id, ctx)

http_tests/channel_tests/test_channel_removeowner.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:80: in channel_removeowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...mU3LTRmMTUtNGE3MC05YWM0LWI3OThkZjU4NDM3NFwiIn0.Vj89UQ2LeHeMIiZA1gvKTrHNlFATwq2q7T4--lgebi8', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...I5LTdhYWQtNGQ0NS1iMjgyLTE5YzVkMjI0OTRhNVwiIn0.u-tAUBiuM4wU9u1m6CZPGUP9L1-e_s_0ne_JCoM5Hes', handle_str='buzzlightyear')
ctx = None

    def test_invalidated_token(user_woody, woodys_public_toybox, user_buzz, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_removeowner(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)

http_tests/channel_tests/test_channel_removeowner.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:80: in channel_removeowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...Dg3LTQ5MjEtNGFlZi04MzMyLThlM2NlM2E2NWU2ZFwiIn0.CF9mgCx7lgtU2e7wfTJb7RCN1LmRwXf7SK5dLuKYjDI', handle_str='sheriffwoody')
ctx = None

    def test_invalidated_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channels_create(user_woody.token, 'literally anything', True, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/channels_tests/test_channels_create.py:40: Failed
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...Dc0LTk0ZGUtNDQ2OC1iY2MyLTI1NjhkY2QyZjk5ZVwiIn0.ZnSBdzEh3oDXdDso7FUpqNYzEJ9OT7syKm45cU2FXw0', handle_str='sheriffwoody')
ctx = None

    def test_invalidated_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channels_list(user_woody.token, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/channels_tests/test_channels_list.py:53: Failed
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TRlLWE1NDMtNDkyMy1hYzVkLTUyM2I3ZjMyNWVhM1wiIn0.oipDhhf44tWSxs4ivnGOjrpv3um7oJmUTbG0WolxpIQ', handle_str='sheriffwoody')
ctx = None

    def test_invalidated_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channels_listall(user_woody.token, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/channels_tests/test_channels_listall.py:44: Failed
________________________ test_dm_name_creation_multiple ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TU3LWY0MTgtNDA5OS04YjQ4LWZmNDAxM2Y0MDdiNlwiIn0.A_ZwS0HstfQpa0N-HccM6uRHbp4HWuglt2uwTnyNur8', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...FkLWUwYTUtNDE3OC04Nzc3LTE0OWU3YWYzZDkxN1wiIn0.TLr2SLvr9ldQyfuBAM_i9CLIGSNDi0V-GF6aBo2_HxA', handle_str='buzzlightyear')
ctx = None

    def test_dm_name_creation_multiple(user_woody, user_buzz, ctx):
        the_dm = dm_create(user_woody.token, [user_buzz.u_id], ctx)
        dm_deets = dm_details(user_woody.token, the_dm['dm_id'], ctx)
    
>       assert dm_deets['name'] == ', '.join(sorted([user_woody.handle_str, user_buzz.handle_str]))
E       AssertionError: assert 'buzzlightyear,sheriffwoody' == 'buzzlightyear, sheriffwoody'
E         - buzzlightyear, sheriffwoody
E         ?               -
E         + buzzlightyear,sheriffwoody

http_tests/dm_tests/test_dm_create.py:35: AssertionError
________________________ test_over_fifty_messages_sent _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...2Y5LWNmZTgtNDUyYi1iYjQ5LTM5NzJjZmM4MWI5NlwiIn0.2615RP4jSC3lRQ9I14fGUH2CR_oOjtU_nVjAkbQ3TBo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_over_fifty_messages_sent(user_woody, woody_and_buzz_dm, ctx):
        message_ids = [
            message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy', ctx)['message_id'] for x in
            range(51)
        ]
        message_ids.reverse()
    
        dm_msgs = dm_messages(user_woody.token, woody_and_buzz_dm.dm_id, 0, ctx)
        assert dm_msgs['start'] == 0
>       assert dm_msgs['end'] == 50
E       assert -1 == 50
E         +-1
E         -50

http_tests/dm_tests/test_dm_messages.py:37: AssertionError
________________________ test_removal_by_edit_reflected ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...mI3LTA0OTYtNGNkOC04Nzg4LTRmZmI1NjkxNWExMlwiIn0.7G4H2Mw3XZA78Nr5Z3HFyTv9WRUd6yXcLqfwt215h4s', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_removal_by_edit_reflected(user_woody, woody_and_buzz_dm, ctx):
        msg = message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy maybe?', ctx)['message_id']
    
        dm_msgs = dm_messages(user_woody.token, woody_and_buzz_dm.dm_id, 0, ctx)
        assert dm_msgs['start'] == 0
        assert dm_msgs['end'] == -1
        assert msg in [m['message_id'] for m in dm_msgs['messages']]
    
>       message_edit(user_woody.token, msg, '', ctx)

http_tests/dm_tests/test_dm_messages.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:35: in message_edit
    token=token, message_id=message_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
__________________________ test_successful_dm_removal __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...2NiLWE1N2UtNGJlOC05ZmM1LTE5MmU4OTU5ZDY2M1wiIn0.e3hhILAk9hY9sv21DekmW11INfz7BeYoxHXkMxMg9Ug', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...M5LTJlNTItNDc0MS04MzY3LTMzMmE1MWIyNGJkMlwiIn0.T8MWzMarIb9MziFDPtZKW5Oozx93vS1HZFOtpNBrzVE', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_successful_dm_removal(user_woody, user_buzz, woody_and_buzz_dm, ctx):
        assert dm_remove(user_woody.token, woody_and_buzz_dm.dm_id, ctx) == {}
    
>       assert dm_list(user_woody.token, ctx)['dms'] == []
E       AssertionError: assert [{'dm_id': 1, 'name': 'buzzlightyear,sheriffwoody'}] == []
E         Left contains one more item: {'dm_id': 1, 'name': 'buzzlightyear,sheriffwoody'}
E         Full diff:
E         - []
E         + [{'dm_id': 1, 'name': 'buzzlightyear,sheriffwoody'}]

http_tests/dm_tests/test_dm_remove.py:17: AssertionError
________________________ test_removal_removes_messages _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zVhLWU5NzMtNDM1Zi04N2NjLTYzOGNmNWQwMTkzNlwiIn0.2m450OzLFynInmSYaX7SnoEUcHA63u9xPe7oRg44nOo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7fe677d246a8>
ctx = None

    @iteration3
    def test_removal_removes_messages(user_woody, woody_and_buzz_dm, message_factory, ctx):
        message_factory(user_woody, woody_and_buzz_dm, 'electric')
        message_factory(user_woody, woody_and_buzz_dm, 'electric mouse')
        message_factory(user_woody, woody_and_buzz_dm, 'electric house')
    
>       assert len(search(user_woody.token, 'electric', ctx)['messages']) == 3

http_tests/dm_tests/test_dm_remove.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/other.py:44: in search
    token=token, query_str=query_str
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_dm_id ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...mUyLTI2NDYtNDIwZi05ZWVmLTAxMWZjMWZhNGZiNVwiIn0.E9J50KWLZN6JiTRRYIGCYaWCyBBt6WWpLVkVjgc-F3I', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_invalid_dm_id(user_woody, woody_and_buzz_dm, ctx):
        # should succeed
        dm_remove(user_woody.token, woody_and_buzz_dm.dm_id, ctx)
        with pytest.raises(InputError):
            # should fail
>           dm_remove(user_woody.token, woody_and_buzz_dm.dm_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.InputError'>

http_tests/dm_tests/test_dm_remove.py:44: Failed
________________ test_global_owner_cant_edit_members_message_dm ________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...Q5LTUwOTItNGFmYi1hN2RjLTY1YWM2YTM4M2MyNlwiIn0.BVHnjyV0KoHZ3U1gH8JqjeL8wacipNCdxTUQlrcktXQ', handle_str='buzzlightyear')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...zJhLWU2ZDctNDgwZC05MDc1LWVhMmNmYTAwMTYxNVwiIn0.MAWefrrNiBWInDWmM1_fh9X0YoVxaT7e4WBdcWETFB4', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=2, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7fe677e1ad90>
ctx = None

    def test_global_owner_cant_edit_members_message_dm(user_buzz, user_woody, woody_and_buzz_dm, message_factory, ctx):
        woodys_msg = message_factory(user_woody, woody_and_buzz_dm)
        with pytest.raises(AccessError):
>           message_edit(user_buzz.token, woodys_msg.message_id, 'hi', ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/message_tests/test_message_edit.py:75: Failed
___________________________ test_message_ids_unique ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...2Q3LWZmMzItNDYzMy1iY2ExLTk3Y2Q1NjBlNmU5YVwiIn0.5kbPmxFly4dXq0hOWJgbRY-dRNGpE3jChqryYsVWcNM', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...zkzODlmLWNhMzktNGE3YS1iYzY1LWIwODY0NmU0NzIwMFwiIn0.NyDj4oIVo81stJSavJxRmBRq5_xFh_WMiJf6N_VZjec', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=1, members=[3], name='buzzlightyear,sheriffwoody', dm_id=1)
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[2], all_members=[])
ctx = None

    @pytest.mark.marks(0.5)
    def test_message_ids_unique(user_woody, user_zerg, woody_and_buzz_dm, zergs_private_lair, ctx):
        msg1 = message_send(user_zerg.token, zergs_private_lair.channel_id, 'hi', ctx)
    
        # cross
        msg2 = message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'hi again', ctx)
    
        sleep(2)
    
>       assert msg1['message_id'] != msg2['message_id']
E       assert 1 != 1

http_tests/message_tests/test_message_meta.py:18: AssertionError
________________________ test_message_ids_unique_iter3 _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...DYwLTMzOTYtNDA3Yi05ODQyLTYyZTIyYTc2MTExOVwiIn0.aGh9TZOj0pnOQQZKFAOoIf1jEpJlUj4MMuehP_WggAY', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...WNmNjBiLTdmMWEtNGRmMC04YmE5LTJjZmQyMWYwMWU1ZlwiIn0.fPcRV87lXrPBsOJHeskv0X_T3wRmHC_oyBMUwh3XxXw', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=1, members=[3], name='buzzlightyear,sheriffwoody', dm_id=1)
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[2], all_members=[])
ctx = None

    @pytest.mark.marks(0.5)
    @iteration3
    def test_message_ids_unique_iter3(user_woody, user_zerg, woody_and_buzz_dm, zergs_private_lair, ctx):
        msg1 = message_send(user_zerg.token, zergs_private_lair.channel_id, 'hi', ctx)
    
        # intra
>       msg2 = message_sendlater(user_zerg.token, zergs_private_lair.channel_id, 'hi', utc_now() + 1, ctx)

http_tests/message_tests/test_message_meta.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:112: in message_sendlater
    token=token, channel_id=channel_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
_________________ test_successful_pin_global_owner_in_channel __________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...I1LTdlNDgtNDk3YS1hMDViLTcwZThhYTliMzUwNFwiIn0.TWtAdbWk4fkL3D1WWkspgPGoTNMtx5Rf9tfxNelcj5Q', handle_str='buzzlightyear')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...ThhLWIzMDMtNDM2My04Mzc0LTgzNmM5Mzk2YTIxMlwiIn0.YKZt6Fe3u1hB5cOUwx0wxntsH4Tvb5k8vINUddOhO30', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677de9400>
ctx = None

    @iteration3
    def test_successful_pin_global_owner_in_channel(user_buzz, user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
    
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
>       assert message_pin(user_buzz.token, a_msg.message_id, ctx) == {}

http_tests/message_tests/test_message_pin.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:46: in message_pin
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
___________________________ test_nonmember_cant_pin ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jJlLWEwMWYtNGQ0Mi04MGM1LTYxMzA1NzE1OTYyOVwiIn0.yQQeZ1EcZdhuqHQg-2c5Z_0UyWkehWYG52mPqpWnuI8', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...mYwMWVmLWM2YjYtNDk4Yy04YTQwLWU4ZTJiMTIwMTY4NFwiIn0.-o1fxoH8j13duP2QUqhbZXhLTEk-Bfmy9mp8W92aLP8', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677d27048>
ctx = None

    @iteration3
    def test_nonmember_cant_pin(user_woody, user_zerg, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        with pytest.raises(InputError):
>           message_pin(user_zerg.token, a_msg.message_id, ctx)

http_tests/message_tests/test_message_pin.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:46: in message_pin
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
_______________________ test_successful_react_in_channel _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...DEyLWQ1MGEtNDFmYS04ZWQ0LWRkNjRjZTg0MmIzZlwiIn0.0i2BohwiqNyYjSHYRS6iqwG6mVnP4OQfJwfJwxKaqiU', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...QzLWM0YmItNDdjMy05OTQ5LTMyZGI2NTg2NTRlNlwiIn0.3PYca5A9YIuoXMYUKsECbP7txZGr_8zQNFl0bNKtcN4', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677d247b8>
ctx = None

    @iteration3
    def test_successful_react_in_channel(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        a_msg = message_factory(user_woody, woodys_public_toybox)
    
        assert message_react(user_woody.token, a_msg.message_id, REACT, ctx) == {}
    
        woodys_vw = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)['messages'][0]['reacts'][0]
        buzzs_vw = channel_messages(user_buzz.token, woodys_public_toybox.channel_id, 0, ctx)['messages'][0]['reacts'][0]
    
        assert user_woody.u_id in woodys_vw['u_ids']
        assert woodys_vw['is_this_user_reacted']
    
        assert user_buzz.u_id not in buzzs_vw['u_ids']
>       assert not buzzs_vw['is_this_user_reacted']
E       assert not True

http_tests/message_tests/test_message_react.py:33: AssertionError
_____________________ test_successful_react_to_dm_message ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zk1LWNmMzktNDkzOC05NTRjLTE0NTU3OGJhNWI5NVwiIn0.UxXnq3A3ImOOyXTbmgQ7nJTOqAbkRivJqS8H6DWqBHQ', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...MyLTMzNmMtNDRlYS05ZmU2LTg5YWU1MGVmMmZkZFwiIn0.r23oHkAFcND7lONb_PEHKIXEuaW8CSteFqRpvLru_6M', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7fe677d24950>
ctx = None

    @iteration3
    def test_successful_react_to_dm_message(user_woody, user_buzz, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm)
    
>       assert message_react(user_woody.token, a_msg.message_id, REACT, ctx) == {}

http_tests/message_tests/test_message_react.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:68: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
_________________________ test_nonmember_cannot_react __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...DcyLTM3MjAtNGU1Yi04Y2Q2LTIzNGEzMDE2NjRkM1wiIn0.9HuJPC_p0hdzMLm-pBi4Uia4ZjzvrMU9svO-xbsURQU', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...TAyNWMxLTBhZDgtNDQwNS05NzZhLTY4YTIzMTlmZDc1YlwiIn0.bm9NWOi9fih-HBNcKu4It_Arydn9poGlN_R0VIy6m00', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677d2e598>
ctx = None

    @iteration3
    def test_nonmember_cannot_react(user_woody, user_zerg, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        with pytest.raises(InputError):
>           message_react(user_zerg.token, a_msg.message_id, REACT, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.InputError'>

http_tests/message_tests/test_message_react.py:77: Failed
_____________ test_global_owner_can_remove_members_message_channel _____________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...WRlMzFkLTMyMmQtNDdlMC1iNjY5LTNhYzI2YmEwODNjOFwiIn0.jN2FWgg4pEcdAWtIls_-rsFarOVal3em2GdZt1YD3Ns', handle_str='lordzerg')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...2EzLTljMGItNGJiOS1hZGEzLWJkYjc2ZTAwNTFjYVwiIn0.PrMWim7o7PT9geO0jHevUMmVLbX08ysLpInIOa3NIWE', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677ce3f28>
ctx = None

    def test_global_owner_can_remove_members_message_channel(user_zerg, user_woody, woodys_public_toybox, message_factory, ctx):
        woodys_msg = message_factory(user_woody, woodys_public_toybox)
        channel_join(user_zerg.token, woodys_public_toybox.channel_id, ctx)
>       message_remove(user_zerg.token, woodys_msg.message_id, ctx)

http_tests/message_tests/test_message_remove.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:24: in message_remove
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...WQ0LTc0ZTYtNDEwMy1iNmUwLTQ5N2I2MzM0YzQyMlwiIn0.ZKhxr-3PMpKjw3IXH-GLgbCnuMItXhAKp4MhkFhkzek', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           message_send(user_woody.token, woodys_public_toybox.channel_id, 'AccessError nooooooooo', ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/message_tests/test_message_send.py:44: Failed
__________________________ test_valid_future_message ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...mRlLTNkMjAtNGU0NS1iMjBjLThiN2Q2NTM5MGU3ZFwiIn0.Lz5OdSa7z1RYRcOYnOQN9JSJQb0lyZz76PgsGF1oWg0', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    @iteration3
    def test_valid_future_message(user_woody, woodys_public_toybox, ctx):
        msg_text = 'hello, world'
        tts = utc_now() + 2
>       msg = message_sendlater(user_woody.token, woodys_public_toybox.channel_id, msg_text, tts, ctx)

http_tests/message_tests/test_message_sendlater.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:112: in message_sendlater
    token=token, channel_id=channel_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
___________________________ test_returns_immediately ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...mNmLTY0MTktNGQ4My04YmUzLTlmMDYzYmNkYmRjMFwiIn0.8SmHqA65bMLVeoOBQrU54BK6NjTcKXKumpJf5y2JqFs', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    @iteration3
    def test_returns_immediately(user_woody, woodys_public_toybox, ctx):
        msg_text = 'hello, world'
        time_req = utc_now()
        tts = utc_now() + 2
>       msg = message_sendlater(user_woody.token, woodys_public_toybox.channel_id, msg_text, tts, ctx)

http_tests/message_tests/test_message_sendlater.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:112: in message_sendlater
    token=token, channel_id=channel_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
__________________________ test_valid_future_message ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...ThiLWQyZGMtNDY2Ny1hMGI5LWEyM2FhNTc2NWZlNVwiIn0.aq_l-pzFwB8Ugy0j9-HNByQnA_IirOWoicgqd29krqk', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    @iteration3
    def test_valid_future_message(user_woody, woody_and_buzz_dm, ctx):
        msg_text = 'hello, world'
        tts = utc_now() + 2
>       msg = message_sendlaterdm(user_woody.token, woody_and_buzz_dm.dm_id, msg_text, tts, ctx)

http_tests/message_tests/test_message_sendlaterdm.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:123: in message_sendlaterdm
    token=token, dm_id=dm_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
___________________________ test_returns_immediately ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zYyLTk5MjUtNDlkOS05NzNlLTk3MmNmYTEzYmRjMVwiIn0.IWRVYhNSwSDJBBIaT5jpaHqay7Q0V9EDv_32YvvU2Kk', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    @iteration3
    def test_returns_immediately(user_woody, woody_and_buzz_dm, ctx):
        msg_text = 'hello, world'
        time_req = utc_now()
        tts = utc_now() + 2
>       msg = message_sendlaterdm(user_woody.token, woody_and_buzz_dm.dm_id, msg_text, tts, ctx)

http_tests/message_tests/test_message_sendlaterdm.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:123: in message_sendlaterdm
    token=token, dm_id=dm_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
_______________________ test_successful_share_to_channel _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...WU3LWRlOWQtNDhhMi05ODE0LWVhMzA2MGUyMjNmOFwiIn0.6BoGy-iJpr6BDRUxssFEuj_xlF9Z2e5IpqNNw1zlJlE', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677d24b70>
ctx = None

    @iteration3
    def test_successful_share_to_channel(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox, 'hi')
    
        shared_msg = message_share(user_woody.token, a_msg.message_id, 'amazing', woodys_public_toybox.channel_id, -1, ctx)
    
>       assert 'shared_message_id' in shared_msg
E       AssertionError: assert 'shared_message_id' in {}

http_tests/message_tests/test_message_share.py:23: AssertionError
_________________________ test_successful_share_to_dm __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zU2LWMyZTQtNDRjZi1iMDhlLTA3NzNlNmRkYmJjMlwiIn0.oytl0hqC0C3yfX4TQTr_33_Hz4s2bOH5Kun1raYbb4c', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7fe677d2b268>
ctx = None

    @iteration3
    def test_successful_share_to_dm(user_woody, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm, 'hi')
    
>       shared_msg = message_share(user_woody.token, a_msg.message_id, 'amazing', -1, woody_and_buzz_dm.dm_id, ctx)

http_tests/message_tests/test_message_share.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
______________________ test_successful_cross_share[True] _______________________

to_ch = True
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...DM0LTM2Y2MtNDkzYi1iOWQ0LTc3OWE0NzllNjdiYlwiIn0.MPW-NThknpvjiJ-cOp_uNm5Tp0ekzrdocRYs_0taWEM', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7fe677cec510>
ctx = None

    @iteration3
    @pytest.mark.parametrize('to_ch', [True, False])
    def test_successful_cross_share(to_ch, user_woody, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        if to_ch:
            a_msg = message_factory(user_woody, woody_and_buzz_dm, 'hi')
>           cross = message_share(user_woody.token, a_msg.message_id, 'amazing', woodys_public_toybox.channel_id, -1, ctx)

http_tests/message_tests/test_message_share.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
______________________ test_successful_cross_share[False] ______________________

to_ch = False
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...mVhLWUxNGMtNDc0MC1hY2M3LTBjZTdmMmE0YTcxZFwiIn0.FR8LjEEyW4AoX7t2MkDHNhGflXnxeDwZjBV2eIVPcWo', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7fe677d246a8>
ctx = None

    @iteration3
    @pytest.mark.parametrize('to_ch', [True, False])
    def test_successful_cross_share(to_ch, user_woody, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        if to_ch:
            a_msg = message_factory(user_woody, woody_and_buzz_dm, 'hi')
            cross = message_share(user_woody.token, a_msg.message_id, 'amazing', woodys_public_toybox.channel_id, -1, ctx)
            msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
        else:
            a_msg = message_factory(user_woody, woodys_public_toybox, 'hi')
>           cross = message_share(user_woody.token, a_msg.message_id, 'amazing', -1, woody_and_buzz_dm.dm_id, ctx)

http_tests/message_tests/test_message_share.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
_______________________ test_cannot_share_to_unjoined_dm _______________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...GVjMjg2LTkzMWYtNDkzMC04YzZiLWFjNTMxMTFhZGU3MVwiIn0.AwIlgnAEU1_F92qY2Qbc6eWzUz3SdYHfW53SP1AVbzs', handle_str='lordzerg')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[1], all_members=[])
woody_and_buzz_dm = DM(owner=2, members=[3], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7fe677cdf048>
ctx = None

    @iteration3
    def test_cannot_share_to_unjoined_dm(user_zerg, zergs_private_lair, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_zerg, zergs_private_lair)
        with pytest.raises(AccessError):
>           message_share(user_zerg.token, a_msg.message_id, '', -1, woody_and_buzz_dm.dm_id, ctx)

http_tests/message_tests/test_message_share.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
___________________ test_cannot_share_from_unjoined_channel ____________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...mRiNmRiLTE3YzUtNDZiYi1iODA3LTg0ODlhODkwZjI0YlwiIn0.aO0YYrUyLNy6Yy1svhw9fAlnc79kJ4KrZW3Bh6Pt9h4', handle_str='lordzerg')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...DZlLTFkMzYtNGY2OS1hMjQwLWVlNzdmMmYwZmJmOVwiIn0.0w3kHRro3unBQuEK1qiDk3c-1GHlnG7Ax_A29yNwQF4', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=2, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677d2e8c8>
ctx = None

    @iteration3
    def test_cannot_share_from_unjoined_channel(user_zerg, user_woody, woodys_public_toybox, zergs_private_lair, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        with pytest.raises(InputError):
>           message_share(user_zerg.token, a_msg.message_id, 'lol', zergs_private_lair.channel_id, -1, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.InputError'>

http_tests/message_tests/test_message_share.py:77: Failed
______________________ test_cannot_share_from_unjoined_dm ______________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...2E1MzVmLTA2ZjMtNDMzOC05MjY2LWIyNWM5OGM1YTQyYVwiIn0.acKSqRNLsZcsi8ceroktJLqdk_0rwJh11OAC6y-bpyI', handle_str='lordzerg')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...2U2LTNkZGEtNGU1Yi1hNzZkLTE4NjRkODA2NjNlZlwiIn0.rT61VXSSy_CmL5wroq3uNLM6AyV8QoEO-Gt97KhmKRU', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=2, members=[3], name='buzzlightyear,sheriffwoody', dm_id=1)
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677ce3730>
ctx = None

    @iteration3
    def test_cannot_share_from_unjoined_dm(user_zerg, user_woody, woody_and_buzz_dm, zergs_private_lair, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm)
        with pytest.raises(InputError):
>           message_share(user_zerg.token, a_msg.message_id, 'lol',  zergs_private_lair.channel_id, -1, ctx)

http_tests/message_tests/test_message_share.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
__________________________ test_invalid_og_message_id __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jA2LTM1YzItNDNlMC05YTNlLTY1ZWU2ZmJlYWM1NVwiIn0._HjQxgoXGs8G80qAZpeztdlRQhxAtl4RS2YgD_9hSx8', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    @iteration3
    def test_invalid_og_message_id(user_woody, woodys_public_toybox, ctx):
        with pytest.raises(InputError):
>           message_share(user_woody.token, -1, '', woodys_public_toybox.channel_id, -1, ctx)

http_tests/message_tests/test_message_share.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:90: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

http_tests/fakepi/util.py:72: Exception
________________ test_successful_unpin_global_owner_in_channel _________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...lhLTEzNDgtNGI3Ny1iOTE5LTk1ZjlhYjVlZDg1YVwiIn0.L6TQCykQ5pduYVim_ljys9jp0imCi7umilhdZ6Ej2yc', handle_str='buzzlightyear')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=2, token=...jY2LTQxZGMtNDA0YS1iMjZlLWFiMDY5MmIwMGFmYVwiIn0.xkHxqG0lYZWX3q1BAcZTRVKdFoS4OMaBW5mEoSsC8WY', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677ce3a60>
ctx = None

    @iteration3
    def test_successful_unpin_global_owner_in_channel(user_buzz, user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
    
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
>       msg_pin(user_buzz.token, a_msg.message_id, ctx) == {}

http_tests/message_tests/test_message_unpin.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:46: in message_pin
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
__________________________ test_nonmember_cant_unpin ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...2M5LTViYjktNGNmNS04MWY2LTZiMDY1MDdjZmZhYVwiIn0.8S-zhpPupMzbep-WmfUcIlagbB2OrExDiQMR12FtGkc', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...zc0NGNiLTEwMzAtNGZiOS04OTdkLWJjNWY3Zjk0OWIxMFwiIn0.pZ-t5rmCHWVRvJf7fzzP2QlGfY_fhim8Rnf-iSEDJTM', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677d246a8>
ctx = None

    @iteration3
    def test_nonmember_cant_unpin(user_woody, user_zerg, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        msg_pin(user_woody.token, a_msg.message_id, ctx)
        with pytest.raises(InputError):
>           message_unpin(user_zerg.token, a_msg.message_id, ctx)

http_tests/message_tests/test_message_unpin.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:57: in message_unpin
    token=token, message_id=message_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
>           raise error.AccessError()
E           http_tests.error.AccessError: 403 Forbidden: None

http_tests/fakepi/util.py:70: AccessError
______________________ test_successful_unreact_in_channel ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jJiLTYzNmYtNGFlMC1iZjkwLTA5YTc3NjkyZTdjY1wiIn0.A6eKsMBYtf4aF3ke5Fnn5ym6zI1-KNKZRz6ocf4h--4', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...hiLWNkMGUtNDY3MS04OTJjLTRmOWJhNTVjYTNiNlwiIn0.7p-AS_Qx55G8WWSfkW18LCzGU7xh3MKkb1K82Ah8MGU', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677caa730>
ctx = None

    @iteration3
    def test_successful_unreact_in_channel(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        a_msg = message_factory(user_woody, woodys_public_toybox)
    
        msg_react(user_woody.token, a_msg.message_id, REACT, ctx)
        msg_react(user_buzz.token, a_msg.message_id, REACT, ctx)
    
        assert message_unreact(user_woody.token, a_msg.message_id, REACT, ctx) == {}
        assert message_unreact(user_buzz.token, a_msg.message_id, REACT, ctx) == {}
    
        woodys_vw = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)['messages'][0]['reacts'][0]
        buzzs_vw = channel_messages(user_buzz.token, woodys_public_toybox.channel_id, 0, ctx)['messages'][0]['reacts'][0]
    
        assert user_woody.u_id not in woodys_vw['u_ids']
>       assert not woodys_vw['is_this_user_reacted']
E       assert not True

http_tests/message_tests/test_message_unreact.py:35: AssertionError
____________________ test_successful_unreact_to_dm_message _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...2RiLTVjNjktNDJjNC1hMTJmLWQ4NzE1M2M3Y2I3ZlwiIn0.NNbUUBpJecbiyFtuZz57VyG0MCclNd_EUSfBw2LthJk', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...Q1LTgxNTctNDE0My1iNWFmLTlhMzk1ODJmZjcwZlwiIn0.zco0CX7ldsThQeIhHT_RAwZJD5Mo4ctF61_0hZkXRSA', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7fe677d39400>
ctx = None

    @iteration3
    def test_successful_unreact_to_dm_message(user_woody, user_buzz, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm)
    
>       msg_react(user_woody.token, a_msg.message_id, REACT, ctx)

http_tests/message_tests/test_message_unreact.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:68: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
___________________________ test_cant_unreact_twice ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TViLTQ3ZDQtNDBiYy1iMDM0LTcwMDRkZmM1NDJmNlwiIn0.DR8y57SatIKpAR3U7ZAol8YGrqGgElLtFTSPjPIpquc', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677caa2f0>
ctx = None

    @iteration3
    def test_cant_unreact_twice(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        msg_react(user_woody.token, a_msg.message_id, REACT, ctx)
    
        message_unreact(user_woody.token, a_msg.message_id, REACT, ctx)
        with pytest.raises(InputError):
>           message_unreact(user_woody.token, a_msg.message_id, REACT, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.InputError'>

http_tests/message_tests/test_message_unreact.py:82: Failed
________________________ test_nonmember_cannot_unreact _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...Dg0LTA1NWYtNDVlNy1hYzg2LTNhYThlM2E2ODY0N1wiIn0.l3fOIAvyZPvdjsHn_qDgHZ0r_veYU_E538lBHOOZ1-8', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...DgzYmM0LTFjZjItNGY5Ny04ODdiLTY1NWJkOWU3ZWIyM1wiIn0.HTVI0xkIDrFZQiKFCo065zKgU5VimzLLTu_zAR8FdSs', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677d24598>
ctx = None

    @iteration3
    def test_nonmember_cannot_unreact(user_woody, user_zerg, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        msg_react(user_woody.token, a_msg.message_id, REACT, ctx)
        with pytest.raises(InputError):
>           message_unreact(user_zerg.token, a_msg.message_id, REACT, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.InputError'>

http_tests/message_tests/test_message_unreact.py:90: Failed
_______________________________ test_clear_works _______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...GNkLWViOWUtNGEwNC1iNmFhLTVjZjEyODRkY2RmY1wiIn0.S65i2RczZ3AMR0JEcPDgsEH7conR05DwGgfCSvC4cBg', handle_str='sheriffwoody')
user_factory = <function user_factory.<locals>.make_user at 0x7fe677d249d8>
ctx = None

    def test_clear_works(user_woody, user_factory, ctx):
        # an existing user can do something
        assert users_all(user_woody.token, ctx) is not None
    
        clear(ctx)
    
        with pytest.raises(AccessError):
            #  ex-existing user now can't do the original action because they don't exist
            users_all(user_woody.token, ctx)
    
        loner = user_factory('bob@gmail.com', 'aweakpassword', 'name_first', 'name_last')
    
        loner_prof = user_profile(loner.token, loner.u_id, ctx).popitem()[-1]
        users = users_all(loner.token, ctx)
        chs = channels_listall(loner.token, ctx)
    
>       assert users['users'] == [loner_prof]
E       AssertionError: assert [{'email': 'bob@gmail.com',\n  'handle_str': 'name_firstname_last',\n  'name_first': 'name_first',\n  'name_last': 'name_last',\n  'u_id': 1}] == [{'email': 'bob@gmail.com',\n  'handle_str': 'name_firstname_last',\n  'name_first': 'name_first',\n  'name_last': 'name_last',\n  'profile_img_url': [],\n  'u_id': 1}]
E         At index 0 diff: {'u_id': 1, 'email': 'bob@gmail.com', 'name_first': 'name_first', 'name_last': 'name_last', 'handle_str': 'name_firstname_last'} != {'u_id': 1, 'email': 'bob@gmail.com', 'name_first': 'name_first', 'name_last': 'name_last', 'handle_str': 'name_firstname_last', 'profile_img_url': []}
E         Full diff:
E           [
E            {'email': 'bob@gmail.com',
E             'handle_str': 'name_firstname_last',
E             'name_first': 'name_first',
E             'name_last': 'name_last',
E         -   'profile_img_url': [],
E             'u_id': 1},
E           ]

http_tests/other_tests/test_clear.py:31: AssertionError
_______________ test_tag_thru_message_send_triggers_notification _______________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TdmLTM1MzMtNDNhNi1hYjI4LTY0NTFmNDNmODYyMFwiIn0.eKWzHMB93yPWxaHHg3EjOKantZ3HaFI0xqFb4A38o4g', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...FjLWNkYzQtNDRmOS1iNzk4LTY3YWJhMTQ1MjM5MlwiIn0.RXvQG9Jhn2zEyMRjAnm59R5LoPlsg08-XEy4C68vRXY', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677c5b378>
ctx = None

    @iteration3
    def test_tag_thru_message_send_triggers_notification(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        content = f'@{user_woody.handle_str} hi'
        message_factory(user_buzz, woodys_public_toybox, content)
    
        notifs = notifications_get(user_woody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channel_id': woodys_public_toybox.channel_id,
            'dm_id': -1,
            'notification_message': f'{user_buzz.handle_str} tagged you in {woodys_public_toybox.name}: {content[:20]}'
        }]}
E       AssertionError: assert {'notifications': []} == {'notifications': [{'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody hi'}]}
E         Differing items:
E         {'notifications': []} != {'notifications': [{'channel_id': 1, 'dm_id': -1, 'notification_message': 'buzzlightyear tagged you in woodys toybox: @sheriffwoody hi'}]}
E         Full diff:
E           {
E         +  'notifications': [],
E         -  'notifications': [{'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody hi'}],
E           }

http_tests/other_tests/test_notifications_get.py:26: AssertionError
______________ test_tag_thru_message_senddm_triggers_notification ______________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TEyLWQ3ZmUtNDUzNy1iOTQ3LTQ4NTFkNjk2MmQxN1wiIn0.ZjGYoQvx7BMUoPKy6oU9JBiqxa8HBL1pvb30Gg38p0I', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...FjLTE3OWYtNGQxYS05NjQ4LTM0M2YyMGIwNWI4OFwiIn0.5iT2m8vxpgmgxWtyyzEdlj4948zOqMCIQlvkhACBmf4', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7fe677c4bd90>
ctx = None

    @iteration3
    def test_tag_thru_message_senddm_triggers_notification(user_woody, user_buzz, woody_and_buzz_dm, message_factory, ctx):
        content = f'@{user_woody.handle_str} hi'
        message_factory(user_buzz, woody_and_buzz_dm, content)
    
        notifs = notifications_get(user_woody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channel_id': -1,
            'dm_id': woody_and_buzz_dm.dm_id,
            'notification_message': f'{user_buzz.handle_str} tagged you in {woody_and_buzz_dm.name}: {content[:20]}'
        }]}
E       AssertionError: assert {'notifications': []} == {'notifications': [{'channel_id': -1,\n                    'dm_id': 1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'buzzlightyear,sheriffwoody: '\n                                            '@sheriffwoody hi'}]}
E         Differing items:
E         {'notifications': []} != {'notifications': [{'channel_id': -1, 'dm_id': 1, 'notification_message': 'buzzlightyear tagged you in buzzlightyear,sheriffwoody: @sheriffwoody hi'}]}
E         Full diff:
E           {
E         +  'notifications': [],
E         -  'notifications': [{'channel_id': -1,
E         -                     'dm_id': 1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'buzzlightyear,sheriffwoody: '
E         -                                             '@sheriffwoody hi'}],
E           }

http_tests/other_tests/test_notifications_get.py:40: AssertionError
_______________ test_tag_thru_message_edit_triggers_notification _______________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TBkLTIwMTgtNDJkOS05ODE3LTU0NWRjNGI2NGRkN1wiIn0.VPpw6OQUyV1HzX_IGNciuSQWQWtU1cGyfMTBNPx9kk0', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...NhLTI0YjgtNDM2OC05ZDRmLWQwZmM5ZGMxZTA1NVwiIn0.YMu65J0OByL6cxFqqQMiIHmyMGMSMyy4BOlnLOukNqE', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677d996a8>
ctx = None

    @iteration3
    def test_tag_thru_message_edit_triggers_notification(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        a_msg = message_factory(user_buzz, woodys_public_toybox)
    
        content = f'@{user_woody.handle_str} hi'
        message_edit(user_buzz.token, a_msg.message_id, content, ctx)
    
        notifs = notifications_get(user_woody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channel_id': woodys_public_toybox.channel_id,
            'dm_id': -1,
            'notification_message': f'{user_buzz.handle_str} tagged you in {woodys_public_toybox.name}: {content[:20]}'
        }]}
E       AssertionError: assert {'notifications': []} == {'notifications': [{'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody hi'}]}
E         Differing items:
E         {'notifications': []} != {'notifications': [{'channel_id': 1, 'dm_id': -1, 'notification_message': 'buzzlightyear tagged you in woodys toybox: @sheriffwoody hi'}]}
E         Full diff:
E           {
E         +  'notifications': [],
E         -  'notifications': [{'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody hi'}],
E           }

http_tests/other_tests/test_notifications_get.py:58: AssertionError
______________ test_tag_thru_message_share_triggers_notification _______________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...WM5LTQ3M2ItNGM0YS1iMTdmLTBkNzY5ODZlNmUzYVwiIn0.ztNG3jogLXcq0sHAYRDGOFaAOfSg6lLhEuo3DZSJR1k', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...ljLTViM2ItNDUzNS04ZTE3LWI4M2Q5OWJlMWY0YlwiIn0._Sl3LLV8wP-eqLvUbkSh8SJ9jeEFG2RIMk39h1TcYdg', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677eacd90>
ctx = None

    @iteration3
    def test_tag_thru_message_share_triggers_notification(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        a_msg = message_factory(user_woody, woodys_public_toybox)
    
        message_share(user_buzz.token, a_msg.message_id, f'@{user_woody.handle_str}', woodys_public_toybox.channel_id, -1,
                      ctx)
    
        notifs = notifications_get(user_woody.token, ctx)['notifications']
    
>       assert len(notifs) == 1
E       assert 0 == 1
E         +0
E         -1

http_tests/other_tests/test_notifications_get.py:76: AssertionError
____________ test_tag_thru_message_sendlater_triggers_notification _____________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jI4LTJkOGItNDIwYS04NWUwLWU3ZGQzYjYxZTE5NFwiIn0._Ofl-pOBLwVS3GhG_3NaCND7VeJyTv9aeR2Ir4uyWaE', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...Q0LWRmMWEtNDM4NC1hY2FhLTZhMDg3Y2QwMWE2YVwiIn0.BtmSrpXybfNPYj49tH-AHuc_Um07EsOTNgzzoqZZWeQ', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677e43ea0>
ctx = None

    @iteration3
    def test_tag_thru_message_sendlater_triggers_notification(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        content = f'@{user_woody.handle_str} hi'
>       message_factory(user_buzz, woodys_public_toybox, content, delay=1)

http_tests/other_tests/test_notifications_get.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:101: in make_message
    msg_id = message.message_sendlater(poster.token, location.channel_id, content, tts, ctx).popitem()[-1]
http_tests/fakepi/message.py:112: in message_sendlater
    token=token, channel_id=channel_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
___________ test_tag_thru_message_sendlaterdm_triggers_notification ____________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...WFjLWVhNzQtNGI4ZS05NjRhLTljNmY1ZmMxOGEwNFwiIn0.KSDeaAj8GicegwQfjBGuHmRzpUgxyWOaRHrncjt9Cqc', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...FkLTRjNDYtNDczYS1iYTk5LTg1NGMyOWVhZTAxZFwiIn0.ARiGd7WOYFIp32lqUyHlCcaEAieLkf7xWcb3B2zMFQ4', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7fe677de9158>
ctx = None

    @iteration3
    def test_tag_thru_message_sendlaterdm_triggers_notification(user_woody, user_buzz, woody_and_buzz_dm, message_factory, ctx):
        content = f'@{user_woody.handle_str} hi'
>       message_factory(user_buzz, woody_and_buzz_dm, content, delay=1)

http_tests/other_tests/test_notifications_get.py:110: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_sendlaterdm(poster.token, location.dm_id, content, tts, ctx).popitem()[-1]
http_tests/fakepi/message.py:123: in message_sendlaterdm
    token=token, dm_id=dm_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
________ test_tag_notification_message_preview_length[a small message] _________

content = 'a small message @sheriffwoody'
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jMyLWFiOGEtNDFkZC1hYmNjLTYzOGI4ZTQ5ZmQyMFwiIn0._YkoKePIBOFYTsYVZJHb6qZsuBcSJSrvuS6pEsygI1o', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...YzLWZmMTMtNDZmMC04NTVhLWZjNmNhZjhmZjE4OVwiIn0.6aDg9FTBNy5n29mVERZCwn3h-0WXPQdA0BBLJXkUpy0', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677d980d0>
ctx = None

    @iteration3
    @pytest.mark.parametrize('content', ['a small message', 'AAAAAAA' * 50])
    def test_tag_notification_message_preview_length(content, user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        # tags happen anywhere
        content += f' @{user_woody.handle_str}'
    
        message_factory(user_buzz, woodys_public_toybox, content)
    
        notifs = notifications_get(user_woody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channel_id': woodys_public_toybox.channel_id,
            'dm_id': -1,
            'notification_message': f'{user_buzz.handle_str} tagged you in {woodys_public_toybox.name}: {content[:20]}'
        }]}
E       AssertionError: assert {'notifications': []} == {'notifications': [{'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: a small message '\n                                            '@she'}]}
E         Differing items:
E         {'notifications': []} != {'notifications': [{'channel_id': 1, 'dm_id': -1, 'notification_message': 'buzzlightyear tagged you in woodys toybox: a small message @she'}]}
E         Full diff:
E           {
E         +  'notifications': [],
E         -  'notifications': [{'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: a small message '
E         -                                             '@she'}],
E           }

http_tests/other_tests/test_notifications_get.py:135: AssertionError
_ test_tag_notification_message_preview_length[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] _

content = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA...AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA @sheriffwoody'
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...GRlLWE4NGMtNGRhMi04MGEyLTZiODMxODcxOWUzNFwiIn0.wT9apPr-7oxTyySefi_yUrZxhA8Kp75BH0j9jnkxxfE', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...ZlLTkxZmYtNDA1ZS05ZTFiLTZmOTdjNWFhZmNiYVwiIn0.GISWq1KRRFy6vTD0nt72tgC_rexrTWnfmXFVKuxtgMM', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677eacb70>
ctx = None

    @iteration3
    @pytest.mark.parametrize('content', ['a small message', 'AAAAAAA' * 50])
    def test_tag_notification_message_preview_length(content, user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        # tags happen anywhere
        content += f' @{user_woody.handle_str}'
    
        message_factory(user_buzz, woodys_public_toybox, content)
    
        notifs = notifications_get(user_woody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channel_id': woodys_public_toybox.channel_id,
            'dm_id': -1,
            'notification_message': f'{user_buzz.handle_str} tagged you in {woodys_public_toybox.name}: {content[:20]}'
        }]}
E       AssertionError: assert {'notifications': []} == {'notifications': [{'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: '\n                                            'AAAAAAAAAAAAAAAAAAAA'}]}
E         Differing items:
E         {'notifications': []} != {'notifications': [{'channel_id': 1, 'dm_id': -1, 'notification_message': 'buzzlightyear tagged you in woodys toybox: AAAAAAAAAAAAAAAAAAAA'}]}
E         Full diff:
E           {
E         +  'notifications': [],
E         -  'notifications': [{'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: '
E         -                                             'AAAAAAAAAAAAAAAAAAAA'}],
E           }

http_tests/other_tests/test_notifications_get.py:135: AssertionError
_____________________ test_react_triggers_notification[dm] _____________________

dest = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...WQ4LWFhMjctNDVhMi1hNTRhLWU0NGQ3MzY4NTkzM1wiIn0.RP06w9d3pplINV1nNaoZi4cl1wcDlRmbneMts9QXADs', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...MyLThkMTYtNGM0OC1hMjg4LTk0MDBlNjNlZjg3ZVwiIn0.CyzjSnXS7Gj1FWRiOEZgYilGPxIhOLsQlPUNawrnfD4', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7fe677ce31e0>
ctx = None

    @iteration3
    @pytest.mark.parametrize('dest', ['ch', 'dm'])
    def test_react_triggers_notification(dest, user_woody, user_buzz, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        if dest == 'ch':
            channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        dest = woodys_public_toybox if dest == 'ch' else woody_and_buzz_dm
    
        a_msg = message_factory(user_woody, dest)
    
>       message_react(user_buzz.token, a_msg.message_id, 1, ctx)

http_tests/other_tests/test_notifications_get.py:152: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:68: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
________________ test_add_thru_dm_create_triggers_notification _________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TllLTM0MzMtNDkxMi1hNzhjLTUxOThjYzZhMDliNFwiIn0.lWcjfX5QUhKomX7vCA__yeRvcDBr9MwdbW5dU-HMF2E', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...E1LWFkMTMtNDNlYy04OWQ1LWU5ZWE3YTViMzNmM1wiIn0.j9YbtBc-ioqiPfFsczMi8-bTDNhgDM11MURINkUs4Ho', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    @iteration3
    def test_add_thru_dm_create_triggers_notification(user_woody, user_buzz, woody_and_buzz_dm, ctx):
        buzzs_notifs = notifications_get(user_buzz.token, ctx)
    
>       assert buzzs_notifs == {'notifications': [{
            'channel_id': -1,
            'dm_id': woody_and_buzz_dm.dm_id,
            'notification_message': f'{user_woody.handle_str} added you to {woody_and_buzz_dm.name}'
        }]}
E       AssertionError: assert {'notifications': []} == {'notifications': [{'channel_id': -1,\n                    'dm_id': 1,\n                    'notification_message': 'sheriffwoody added you to '\n                                            'buzzlightyear,sheriffwoody'}]}
E         Differing items:
E         {'notifications': []} != {'notifications': [{'channel_id': -1, 'dm_id': 1, 'notification_message': 'sheriffwoody added you to buzzlightyear,sheriffwoody'}]}
E         Full diff:
E           {
E         +  'notifications': [],
E         -  'notifications': [{'channel_id': -1,
E         -                     'dm_id': 1,
E         -                     'notification_message': 'sheriffwoody added you to '
E         -                                             'buzzlightyear,sheriffwoody'}],
E           }

http_tests/other_tests/test_notifications_get.py:180: AssertionError
__________________ test_most_recent_20_notifications_fetched ___________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...2U2LWVhMDEtNDVkYi1hYWQ5LTVlOWQ5MDg2ZDIyM1wiIn0.08RTgH4psMD_BquQ5DxwuqTS-HQyHajDk5lKusREqCU', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...ZkLTJjZTYtNDU0Ni05NWQ4LWJlZTQ3NzQyNGQ5ZVwiIn0.gbOb50OYx2o_N15CT03kf6QroyMY1QMbHUB7BZEBB20', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677c80400>
ctx = None

    @iteration3
    def test_most_recent_20_notifications_fetched(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        expected = {'notifications': []}
        for ix in range(30):
            content = f'@{user_woody.handle_str} {ix}'
            message_factory(user_buzz, woodys_public_toybox, content)
    
            if ix >= 10:
                expected['notifications'].insert(0, {
                    'channel_id': woodys_public_toybox.channel_id,
                    'dm_id': -1,
                    'notification_message': f'{user_buzz.handle_str} tagged you in {woodys_public_toybox.name}: {content[:20]}'
                })
    
        notifs = notifications_get(user_woody.token, ctx)
    
>       assert notifs == expected
E       AssertionError: assert {'notifications': []} == {'notifications': [{'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 29'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 28'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 27'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 26'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 25'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 24'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 23'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 22'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 21'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 20'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 19'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 18'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 17'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 16'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 15'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 14'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 13'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 12'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 11'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'buzzlightyear tagged you in '\n                                            'woodys toybox: @sheriffwoody 10'}]}
E         Differing items:
E         {'notifications': []} != {'notifications': [{'channel_id': 1, 'dm_id': -1, 'notification_message': 'buzzlightyear tagged you in woodys toybox: ...nnel_id': 1, 'dm_id': -1, 'notification_message': 'buzzlightyear tagged you in woodys toybox: @sheriffwoody 24'}, ...]}
E         Full diff:
E           {
E         +  'notifications': [],
E         -  'notifications': [{'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 29'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 28'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 27'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 26'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 25'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 24'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 23'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 22'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 21'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 20'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 19'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 18'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 17'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 16'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 15'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 14'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 13'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 12'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 11'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'buzzlightyear tagged you in '
E         -                                             'woodys toybox: @sheriffwoody 10'}],
E           }

http_tests/other_tests/test_notifications_get.py:205: AssertionError
_______________________________ test_no_matches ________________________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...U1LTRkNTEtNDc1NS04YTAwLTRkNDc3YThhNjY0OFwiIn0.u2FHrmMo9-B4_xgYKfgizj61cu-OTowmDzGqIyzHrLQ', handle_str='buzzlightyear')
ctx = None

    @iteration3
    def test_no_matches(user_buzz, ctx):
>       msgs = search(user_buzz.token, 'No matches', ctx)

http_tests/other_tests/test_search.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/other.py:44: in search
    token=token, query_str=query_str
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_single_match _______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...mQ4LTQwODMtNDBkMi1hNTMyLTkzNWIxMjQ0YjZlMVwiIn0.T9MemDoPvX4MNeaIXeodADJrA6_khBbpdhPIcyKnSn8', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677c9f048>
ctx = None

    @iteration3
    def test_single_match(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox, 'anything')
    
>       msgs = search(user_woody.token, 'any', ctx)

http_tests/other_tests/test_search.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/other.py:44: in search
    token=token, query_str=query_str
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
____________________________ test_multiple_matches _____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TIzLTA2N2QtNDYzYi04NWZjLTE5ODFiZWY5MTM0M1wiIn0.-CkHKqDzn5wkcfbRNSI9z1YoGzmiqfMtqzjBr55kQzU', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677c9f378>
ctx = None

    @iteration3
    def test_multiple_matches(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox, 'any 1')
        another_msg = message_factory(user_woody, woodys_public_toybox, 'any 2')
    
>       msgs = search(user_woody.token, 'any', ctx)

http_tests/other_tests/test_search.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/other.py:44: in search
    token=token, query_str=query_str
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
________________________ test_multiple_channels_joined _________________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...zI3NDUzLTY3YTctNDgzOC04OTViLWQ4NWM4ZDRiYjIxN1wiIn0.-uu046kvy5UlW3Z1XqVRJEnOAW7aho4iRcH5R0kD6eM', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=2, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677c80e18>
ctx = None

    @iteration3
    def test_multiple_channels_joined(user_zerg, woodys_public_toybox, zergs_private_lair, message_factory, ctx):
        channel_join(user_zerg.token, woodys_public_toybox.channel_id, ctx)
    
        in_woody = message_factory(user_zerg, woodys_public_toybox, 'any 1')
        in_zerg = message_factory(user_zerg, zergs_private_lair, 'any 2')
    
>       msgs = search(user_zerg.token, 'any', ctx)

http_tests/other_tests/test_search.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/other.py:44: in search
    token=token, query_str=query_str
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
__________________ test_search_includes_only_joined_channels ___________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...ViLTcwOTAtNGExYi1iNjNiLWFiZDU3MTAzZjZmMFwiIn0.bLh39N1TxYOxylVUesWvsdMBH-QD4Q2hmbUEkJnujSc', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677d39488>
ctx = None

    @iteration3
    def test_search_includes_only_joined_channels(user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        message_factory(user_buzz, woodys_public_toybox, 'anything')
    
        channel_leave(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
>       msgs = search(user_buzz.token, 'any', ctx)

http_tests/other_tests/test_search.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/other.py:44: in search
    token=token, query_str=query_str
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________ test_search_matches_more_than_just_authorised_user ______________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...WI0LWE2NTMtNDEyNS1hNDhmLTM3ZjdmNmI3YjA4OVwiIn0.EU4TyfGH-OJMlus5rg3x606HP7H7K8FDUtZSQgHcm-s', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...ZlLTE5YTUtNDQ4NC1hOWFmLWViZjY5ZWE5N2JiY1wiIn0.8D6IwiEuermUjUQ7WbvKzUeHPiVrIRc9lVl_-LS1hqA', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677d98510>
ctx = None

    @iteration3
    def test_search_matches_more_than_just_authorised_user(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        message_factory(user_buzz, woodys_public_toybox, 'hi')
        message_factory(user_woody, woodys_public_toybox, 'hi')
    
>       msgs = search(user_woody.token, 'hi', ctx)['messages']

http_tests/other_tests/test_search.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/other.py:44: in search
    token=token, query_str=query_str
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
____________________________ test_invalid_search[] _____________________________

query_str = ''
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...ThjLTZkZDAtNGUwZi04ODYxLWZkNDBiOWRmMGUwN1wiIn0.ipLiEXVs7I1DlZQqGWbTi3D47bnSzNIt1rPU43z3BtA', handle_str='sheriffwoody')
ctx = None

    @iteration3
    @pytest.mark.parametrize('query_str', ['', 'a' * 1001])
    def test_invalid_search(query_str, user_woody, ctx):
        with pytest.raises(InputError):
>           search(user_woody.token, query_str, ctx)

http_tests/other_tests/test_search.py:106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/other.py:44: in search
    token=token, query_str=query_str
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_ test_invalid_search[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] _

query_str = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...DNmLWJiYmUtNDgyNS1hNTQ4LTJlMGEyNjY1YmNjMFwiIn0.n7H5SVPoVHP03MvWwUyviCbl6dUcCE3W5KIBX9TZIm0', handle_str='sheriffwoody')
ctx = None

    @iteration3
    @pytest.mark.parametrize('query_str', ['', 'a' * 1001])
    def test_invalid_search(query_str, user_woody, ctx):
        with pytest.raises(InputError):
>           search(user_woody.token, query_str, ctx)

http_tests/other_tests/test_search.py:106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/other.py:44: in search
    token=token, query_str=query_str
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TQxLTUzZWEtNDQ5MS1hNTc0LWM2ZDNlMjI4ZjFkZlwiIn0.TeM1iCXd9weoBr1kEvXrpIYVA3ceLE8HOQc8pV3KGtQ', handle_str='sheriffwoody')
ctx = None

    @iteration3
    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           search(user_woody.token, 'anything', ctx)

http_tests/other_tests/test_search.py:113: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/other.py:44: in search
    token=token, query_str=query_str
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

http_tests/fakepi/util.py:72: Exception
_______________________ test_correct_return_format[True] _______________________

do_standup = True
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TQzLTE0YmUtNDcyOS05ZGRiLTg3NGUxODE5YmFlZVwiIn0.DG8Cps_IwFdswY5Rsqpf7jTU1w6WoSkvIcqncAQbD2U', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
standup_factory = <function standup_factory.<locals>.make_standup at 0x7fe677c80400>
ctx = None

    @iteration3
    @pytest.mark.parametrize('do_standup', [True, False])
    def test_correct_return_format(do_standup, user_woody, woodys_public_toybox, standup_factory, ctx):
        if do_standup:
            standup_factory(user_woody, woodys_public_toybox)
    
        r = standup_active(user_woody.token, woodys_public_toybox.channel_id, ctx)
    
        assert 'is_active' in r and isinstance(r['is_active'], bool)
>       assert 'time_finish' in r and (type(r['time_finish']) is int if do_standup else type(r['time_finish'] is None))
E       AssertionError: assert ('time_finish' in {'is_active': True, 'time_finish': 1637007994.496845} and False)

http_tests/standup_tests/test_standup_active.py:25: AssertionError
________________ test_messages_buffered_and_displayed_correctly ________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...GJmLTIzZjAtNGI1OC1iNWM4LTRjMzFlYTNlNTk5ZlwiIn0.uZ0OzCggWs8GTHqvtvh7tFxzNJX1j1SWnV307X4LnrE', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...YzLWJiZDYtNGIzYi1iYjMzLWUwMmI0NDkxMWMzOVwiIn0.93uhvozUOhAFoXMNBYKTBBO-gdfTA-6_tnQx4U0Ng6A', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
standup_factory = <function standup_factory.<locals>.make_standup at 0x7fe677e1a048>
ctx = None

    @iteration3
    def test_messages_buffered_and_displayed_correctly(user_woody, user_buzz, woodys_public_toybox, standup_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        std = standup_factory(user_woody, woodys_public_toybox, 1)
    
        standup_send(user_woody.token, woodys_public_toybox.channel_id, 'welcome', ctx)
        standup_send(user_buzz.token, woodys_public_toybox.channel_id, 'to the', ctx)
        standup_send(user_woody.token, woodys_public_toybox.channel_id, 'black parade', ctx)
    
        sleep(2)
    
        ch_msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)['messages']
        expected = '\n'.join([
            f'{user_woody.handle_str}: welcome',
            f'{user_buzz.handle_str}: to the',
            f'{user_woody.handle_str}: black parade'
        ])
    
>       assert len(ch_msgs) == 1 and ch_msgs[0]['message'] == expected and ch_msgs[0]['time_created'] == std.time_finish
E       AssertionError: assert (1 == 1
E         +1
E         -1 and 'sheriffwoody: welcome\nbuzzlightyear: to the\nsheriffwoody: black parade' == 'sheriffwoody: welcome\nbuzzlightyear: to the\nsheriffwoody: black parade'
E           sheriffwoody: welcome
E           buzzlightyear: to the
E           sheriffwoody: black parade and 1637007996.916974 == 1637007996.916627
E         +1637007996.916974
E         -1637007996.916627)

http_tests/standup_tests/test_standup_send.py:35: AssertionError
_____________________ test_non_member_cannot_standup_send ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...2U5LTE3NTAtNDEyMi05N2U5LTdlYjc3MjliZjQ5MVwiIn0.xtMP-RoZUmmhStMLb1aEUey1mJfDR__OZH7oTQjLT80', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...cwLTQ2MjEtNDBjOS04ZjMzLWE3N2YzYWIzNWEzNFwiIn0.DbpMJ_PbSIcOjjUpCL5AE3_Lhdk9e6GxLwMSd3-3sYA', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
standup_factory = <function standup_factory.<locals>.make_standup at 0x7fe677c4b268>
ctx = None

    @iteration3
    def test_non_member_cannot_standup_send(user_woody, user_buzz, woodys_public_toybox, standup_factory, ctx):
        standup_factory(user_woody, woodys_public_toybox)
        with pytest.raises(AccessError):
>           standup_send(user_buzz.token, woodys_public_toybox.channel_id, 'lol', ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/standup_tests/test_standup_send.py:49: Failed
_______________________ test_standup_start_return_format _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...DE0LWRlZWMtNGUyYS04OWY5LTA3ZDE1MTIzNzk3YlwiIn0.AYHuD7YTyMVLfndDtbRldjUouE-T3i7H-kb2FfpMbHA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    @iteration3
    def test_standup_start_return_format(user_woody, woodys_public_toybox, ctx):
        ret = standup_start(user_woody.token, woodys_public_toybox.channel_id, 1, ctx)
    
>       assert 'time_finish' in ret and isinstance(ret['time_finish'], int)
E       AssertionError: assert ('time_finish' in {'time_finish': 1637008001.527703} and False)
E        +  where False = isinstance(1637008001.527703, int)

http_tests/standup_tests/test_standup_start.py:20: AssertionError
___________________ test_messages_tracked_message_sendlater ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...DNkLTZmNjItNGM2OS04MTE2LTM1NWMwM2M4NjRhYVwiIn0.yOcF6AEG4R0sz7SK6JZhzkYKuVw27otgBjLQ919kipQ', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677c5b1e0>
ctx = None

    @iteration3
    def test_messages_tracked_message_sendlater(user_woody, woodys_public_toybox, message_factory, ctx):
>       message_factory(user_woody, woodys_public_toybox, delay=1)

http_tests/stats_tests/test_user_stats.py:133: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:101: in make_message
    msg_id = message.message_sendlater(poster.token, location.channel_id, content, tts, ctx).popitem()[-1]
http_tests/fakepi/message.py:112: in message_sendlater
    token=token, channel_id=channel_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
__________________ test_messages_tracked_message_senddmlater ___________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TE5LWViNGEtNDQ3OS05ZWZlLTI3MjY2Y2Q3ZWM4ZFwiIn0.OE03_oHEEscfCTccWFFV4WsAtEVow4DVri909Rilr2A', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7fe677d397b8>
ctx = None

    @iteration3
    def test_messages_tracked_message_senddmlater(user_woody, woody_and_buzz_dm, message_factory, ctx):
>       message_factory(user_woody, woody_and_buzz_dm, delay=1)

http_tests/stats_tests/test_user_stats.py:157: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_sendlaterdm(poster.token, location.dm_id, content, tts, ctx).popitem()[-1]
http_tests/fakepi/message.py:123: in message_sendlaterdm
    token=token, dm_id=dm_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
___________________________ test_involvement_tracked ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...WQzLWRjOGItNDZmYi1hM2VlLTczNTFhZTU4Nzk4NVwiIn0.buyg8-hCu_lh34fmH9a1x_PRfqKL400Ib3tzq7dBSLE', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...zc5Y2YyLWI4MGItNDkxNS1hNTEwLWEyZWMxMGNmOThkOVwiIn0.G0-yfTlENxjisb7M3aKnzlo9GIHIqbmSQd3Bq5iSwuc', handle_str='lordzerg')
channel_factory = <function channel_factory.<locals>.make_channel at 0x7fe677d49d90>
ctx = None

    @iteration3
    def test_involvement_tracked(user_woody, user_zerg, channel_factory, ctx):
        stats = user_stats(user_woody.token, ctx)['user_stats']
>       assert stats['involvement_rate'] == 0
E       assert 0.007936507936507936 == 0
E         +0.007936507936507936
E         -0

http_tests/stats_tests/test_user_stats.py:197: AssertionError
___________________________ test_return_type_correct ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TJjLTFkODgtNGMwYS1iZGM1LWEwYmYwMTFjOTIzYVwiIn0.R22wW2FUEvVtj8fRb59L_BhmZBkOc27HH1GYoY_fJuw', handle_str='sheriffwoody')
ctx = None

    @iteration3
    def test_return_type_correct(user_woody, ctx):
        stats = users_stats(user_woody.token, ctx)
    
        assert 'workspace_stats' in stats
        stats = stats['workspace_stats']
    
        assert 'channels_exist' in stats and isinstance(stats['channels_exist'], list)
>       assert len(stats['channels_exist']) == 1
E       assert 179 == 1
E         +179
E         -1

http_tests/stats_tests/test_users_stats.py:26: AssertionError
____________________ test_channels_tracked_channels_create _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...GViLWYyMDgtNDBiNy1hM2Y0LWZkODAwNTY5YmM3ZVwiIn0.0Q66arh9LrY_iWkMZczglMBwAYA-dI8BBKmlIomhf1c', handle_str='sheriffwoody')
channel_factory = <function channel_factory.<locals>.make_channel at 0x7fe677c4b6a8>
ctx = None

    @iteration3
    def test_channels_tracked_channels_create(user_woody, channel_factory, ctx):
        channel_factory(user_woody, 'poop', True)
    
        ch_stats = users_stats(user_woody.token, ctx)['workspace_stats']['channels_exist']
    
>       assert len(ch_stats) == 2
E       assert 180 == 2
E         +180
E         -2

http_tests/stats_tests/test_users_stats.py:50: AssertionError
__________________________ test_dms_tracked_dm_create __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...WMzLWIyNzYtNGRiMS05MGEyLTExODZjYmQ4ZjBjNVwiIn0.0GZ85iNxCc8wxRMwi55JOT3bCfAD-YPeGfiQkKfwuhw', handle_str='sheriffwoody')
dm_factory = <function dm_factory.<locals>.make_dm at 0x7fe677d75e18>
ctx = None

    @iteration3
    def test_dms_tracked_dm_create(user_woody, dm_factory, ctx):
        dm_factory(user_woody, [])
    
        dm_stats = users_stats(user_woody.token, ctx)['workspace_stats']['dms_exist']
    
>       assert len(dm_stats) == 2
E       assert 74 == 2
E         +74
E         -2

http_tests/stats_tests/test_users_stats.py:61: AssertionError
__________________________ test_dms_tracked_dm_remove __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...WFlLTAzYWItNDgzZS05NmFiLTZmYTE2NWNlZGMzNVwiIn0.l8aCnGGeRCYuf867gV8_rxtfEQLTZSct7Lr9uXJoRmI', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    @iteration3
    def test_dms_tracked_dm_remove(user_woody, woody_and_buzz_dm, ctx):
        dm_remove(user_woody.token, woody_and_buzz_dm.dm_id, ctx)
    
        dm_stats = users_stats(user_woody.token, ctx)['workspace_stats']['dms_exist']
    
>       assert len(dm_stats) == 3
E       assert 76 == 3
E         +76
E         -3

http_tests/stats_tests/test_users_stats.py:72: AssertionError
______________________ test_messages_tracked_message_send ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...mRiLTU5M2MtNDAxOS04YTY0LThkNmFhNDcyOTAwZVwiIn0.wIGtB6TEb84ZCisvuG98AQleguknfgXYYuw55ayu5DE', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677d499d8>
ctx = None

    @iteration3
    def test_messages_tracked_message_send(user_woody, woodys_public_toybox, message_factory, ctx):
        message_factory(user_woody, woodys_public_toybox)
    
        msg_stats = users_stats(user_woody.token, ctx)['workspace_stats']['messages_exist']
    
>       assert len(msg_stats) == 2
E       assert 260 == 2
E         +260
E         -2

http_tests/stats_tests/test_users_stats.py:83: AssertionError
___________________ test_messages_tracked_message_sendlater ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jgxLTZkMzctNGFhYi05ZmQyLWQ3Njk2YWQ0MGIwZVwiIn0.CoWVnXK12f1FaxyoibU4koQH2s5Mq_HM_ybjeviz9t8', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677e1a598>
ctx = None

    @iteration3
    def test_messages_tracked_message_sendlater(user_woody, woodys_public_toybox, message_factory, ctx):
>       message_factory(user_woody, woodys_public_toybox, delay=1)

http_tests/stats_tests/test_users_stats.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:101: in make_message
    msg_id = message.message_sendlater(poster.token, location.channel_id, content, tts, ctx).popitem()[-1]
http_tests/fakepi/message.py:112: in message_sendlater
    token=token, channel_id=channel_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
_____________________ test_messages_tracked_message_senddm _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...2IwLTNmNTMtNGYyMy05NWI4LTcwODg2ZDVhZjczNFwiIn0.yYGhmfNg94z-oDZj3xeQUlKH3AhxYe2dsaD_cQ-4Pjo', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7fe677c807b8>
ctx = None

    @iteration3
    def test_messages_tracked_message_senddm(user_woody, woody_and_buzz_dm, message_factory, ctx):
        message_factory(user_woody, woody_and_buzz_dm)
    
        msg_stats = users_stats(user_woody.token, ctx)['workspace_stats']['messages_exist']
    
>       assert len(msg_stats) == 2
E       assert 261 == 2
E         +261
E         -2

http_tests/stats_tests/test_users_stats.py:107: AssertionError
__________________ test_messages_tracked_message_senddmlater ___________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...GMzLTdkZWMtNDg1YS1hZjNkLTQyMjRlY2YwYmYzOFwiIn0.J7cuhSBjgh3KEDX3lk3zUX5DnRW1DWgTYgFvlQxCdFM', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7fe677e1a0d0>
ctx = None

    @iteration3
    def test_messages_tracked_message_senddmlater(user_woody, woody_and_buzz_dm, message_factory, ctx):
>       message_factory(user_woody, woody_and_buzz_dm, delay=1)

http_tests/stats_tests/test_users_stats.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_sendlaterdm(poster.token, location.dm_id, content, tts, ctx).popitem()[-1]
http_tests/fakepi/message.py:123: in message_sendlaterdm
    token=token, dm_id=dm_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:68: InputError
_____________________ test_messages_tracked_message_share ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TFmLTlhODAtNDViOS1hOTVkLWQxNmZmNTRiZGNkMFwiIn0.vQN6tTGHcfUQUHg2c1qT4n2FgvcgEMpt8FwgcfPVrtk', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677c5b158>
ctx = None

    @iteration3
    def test_messages_tracked_message_share(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        message_share(user_woody.token, a_msg.message_id, '', woodys_public_toybox.channel_id, -1, ctx)
    
        msg_stats = users_stats(user_woody.token, ctx)['workspace_stats']['messages_exist']
    
>       assert len(msg_stats) == 3
E       assert 263 == 3
E         +263
E         -3

http_tests/stats_tests/test_users_stats.py:132: AssertionError
_____________________ test_messages_tracked_standup_finish _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...DVkLTlkNmUtNDg0YS1iMjBkLTIzMDVmYjZmY2FhMlwiIn0.lQa4wjT4-cT4lZaU5iprk4Ng3bXTwUL7NBRKI8CJx2o', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
standup_factory = <function standup_factory.<locals>.make_standup at 0x7fe677e1a598>
ctx = None

    @iteration3
    def test_messages_tracked_standup_finish(user_woody, woodys_public_toybox, standup_factory, ctx):
        standup_factory(user_woody, woodys_public_toybox, 1)
        standup_send(user_woody.token, woodys_public_toybox.channel_id, 'hi', ctx)
    
        sleep(2)
    
        msg_stats = users_stats(user_woody.token, ctx)['workspace_stats']['messages_exist']
    
>       assert len(msg_stats) == 2
E       assert 264 == 2
E         +264
E         -2

http_tests/stats_tests/test_users_stats.py:146: AssertionError
___________________ test_messages_tracked_edited_to_removal ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...GUzLWFlMGQtNDA2Yy1hYjQ4LWJiNGNlZjE1YWEwNlwiIn0.E8aqaXDkIHgQzHaFqagaxTG8xqOZaCoX6e-MtFk05zI', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677c5b2f0>
ctx = None

    @iteration3
    def test_messages_tracked_edited_to_removal(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
    
        message_edit(user_woody.token, a_msg.message_id, '', ctx)
    
        msg_stats = users_stats(user_woody.token, ctx)['workspace_stats']['messages_exist']
    
>       assert len(msg_stats) == 3
E       assert 265 == 3
E         +265
E         -3

http_tests/stats_tests/test_users_stats.py:159: AssertionError
________________________ test_messages_tracked_deleted _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...mEwLTc2OTYtNDVkNC1hOGFlLTk5OGQxOTgyODk0YlwiIn0.bugX-3r0Njs56Kzszvb5esnIpRIDicAqIxLVVeE6_J8', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7fe677d391e0>
ctx = None

    @iteration3
    def test_messages_tracked_deleted(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
    
        message_remove(user_woody.token, a_msg.message_id, ctx)
    
        msg_stats = users_stats(user_woody.token, ctx)['workspace_stats']['messages_exist']
    
>       assert len(msg_stats) == 3
E       assert 267 == 3
E         +267
E         -3

http_tests/stats_tests/test_users_stats.py:172: AssertionError
_______________________ test_messages_tracked_dm_removed _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...Tc4LWU1ZTUtNGExMS05MTIyLTE3ZGZiYWY3OGE2M1wiIn0.CCSJI7Q0XQtkVQSfWlSw4JaNu9Djj_1rq7LRX8OtAL0', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7fe677e1a048>
ctx = None

    @iteration3
    def test_messages_tracked_dm_removed(user_woody, woody_and_buzz_dm, message_factory, ctx):
        message_factory(user_woody, woody_and_buzz_dm)
    
        dm_remove(user_woody.token, woody_and_buzz_dm.dm_id, ctx)
    
        msg_stats = users_stats(user_woody.token, ctx)['workspace_stats']['messages_exist']
    
>       assert len(msg_stats) == 3
E       assert 268 == 3
E         +268
E         -3

http_tests/stats_tests/test_users_stats.py:185: AssertionError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TMwLTIwYjAtNDc5MC05Y2YxLTk0ZTgzOGQyNzkyYVwiIn0.LJ5NiVfFgYhiSc_UTBsFWrJlnz99tK71tFtwePxIgm0', handle_str='sheriffwoody')
ctx = None

    @iteration3
    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           users_stats(user_woody.token, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/stats_tests/test_users_stats.py:210: Failed
_________________________ test_successful_email_change _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...GVjLWEwNjUtNGJkNy04OGEzLWJiNTQxYmRhZGRhOVwiIn0.SURfenHQKmRyqeuskmxh5o--J6oTcBPfOxnHAB7ptPI', handle_str='sheriffwoody')
ctx = None

    def test_successful_email_change(user_woody, ctx):
        new_email = 'toystory3@pixar.com'
        user_profile_setemail(user_woody.token, new_email, ctx)
    
        deets = user_profile(user_woody.token, user_woody.u_id, ctx).popitem()[-1]
    
>       assert deets['email'] == new_email
E       AssertionError: assert 'sheriff.woody@andysroom.com' == 'toystory3@pixar.com'
E         - toystory3@pixar.com
E         + sheriff.woody@andysroom.com

http_tests/user_tests/test_user_profile_setemail.py:20: AssertionError
________________________ test_successful_handle_change _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...GIwLWI0NzAtNDU4Ni04NmUxLTIxZGZiZGNiMTJkY1wiIn0.IdeNGvyQAdcF-McjR8TeJMiIdNybiJxqvGjg5PBRbTo', handle_str='sheriffwoody')
ctx = None

    def test_successful_handle_change(user_woody, ctx):
        new_handle = 'www'
        user_profile_sethandle(user_woody.token, new_handle, ctx)
    
        deets = user_profile(user_woody.token, user_woody.u_id, ctx).popitem()[-1]
    
>       assert deets['handle_str'] == new_handle
E       AssertionError: assert 'sheriffwoody' == 'www'
E         - www
E         + sheriffwoody

http_tests/user_tests/test_user_profile_sethandle.py:20: AssertionError
_______________________ test_invalid_handle[new handle] ________________________

handle_str = 'new handle'
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TE5LWI4OWUtNDE4NC1hODkzLTY3OWE4ZGFjMTIwNFwiIn0.m4HCcfk2gGiIZkafQnpccgMjGFXoMXUP3twbhZXk4II', handle_str='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('handle_str', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def test_invalid_handle(handle_str, user_woody, ctx):
        with pytest.raises(InputError):
>           user_profile_sethandle(user_woody.token, handle_str, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.InputError'>

http_tests/user_tests/test_user_profile_sethandle.py:31: Failed
________________________ test_invalid_handle[newh@ndle] ________________________

handle_str = 'newh@ndle'
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jhkLWVhMjgtNDlkNy05MjU1LTZiYTZjNTE1ODc5MlwiIn0.vj__rfhF9Pc3aFinLXp5ib0ML0YMtMHODAxsrtFP0dg', handle_str='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('handle_str', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def test_invalid_handle(handle_str, user_woody, ctx):
        with pytest.raises(InputError):
>           user_profile_sethandle(user_woody.token, handle_str, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.InputError'>

http_tests/user_tests/test_user_profile_sethandle.py:31: Failed
_____________________ test_user_profile_setname_valid_name _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...2FhLTA0YWItNGFiMS05YmIyLTM4MTU1MjcxNzM3NFwiIn0.47feyOc--wDodwsnay4b2BLiborwhVKdZqN1G5d9m4M', handle_str='sheriffwoody')
ctx = None

    def test_user_profile_setname_valid_name(user_woody, ctx):
        #  woody became japanese with family coming first
        user_profile_setname(user_woody.token, user_woody.name_last, user_woody.name_first, ctx)
    
        deets = user_profile(user_woody.token, user_woody.u_id, ctx).popitem()[-1]
    
>       assert deets['name_first'] == user_woody.name_last
E       AssertionError: assert 'sheriff' == 'woody'
E         - woody
E         + sheriff

http_tests/user_tests/test_user_profile_setname.py:20: AssertionError
_________________________ test_cannot_upload_non_jpeg __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...2ZlLTE0ZDMtNDViOS05NTUyLWI1YWUyYzM0OWU2N1wiIn0.CgPPkjoDxIKTuOoIzuz3qNdptFpFnb6AZOuEpqrjOVY', handle_str='sheriffwoody')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def test_cannot_upload_non_jpeg(user_woody, img, ctx):
        with pytest.raises(InputError):
>           user_profile_uploadphoto(user_woody.token, 'http://www.cse.unsw.edu.au/~richardb/index_files/RichardBuckland-200.png', img.xmin, img.ymin, img.xmax, img.ymax, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.InputError'>

http_tests/user_tests/test_user_profile_uploadphoto.py:22: Failed
=========================== short test summary info ============================
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_once_removed_user_cant_do_anything
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removed_profile_still_fetchable_with_user_profile
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_not_in_users_all
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_email_reusable
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_handle_reusable
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_user_nonowner
FAILED http_tests/admin_tests/test_admin_userpermission_change.py::test_cannot_demote_last_owner
FAILED http_tests/auth_tests/test_auth_login.py::test_can_have_two_sessions
FAILED http_tests/auth_tests/test_auth_register.py::test_duplicate_handles_generated_correctly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0]
FAILED http_tests/auth_tests/test_passwordreset_request.py::test_return_format_correct
FAILED http_tests/auth_tests/test_passwordreset_request.py::test_password_request_logs_out_everywhere
FAILED http_tests/channel_tests/test_channel_addowner.py::test_non_member_cannot_add_owner
FAILED http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_cant_addowner_private
FAILED http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_cant_addowner_public
FAILED http_tests/channel_tests/test_channel_addowner.py::test_invalid_token
FAILED http_tests/channel_tests/test_channel_details.py::test_invalid_token
FAILED http_tests/channel_tests/test_channel_invite.py::test_u_id_invalid - E...
FAILED http_tests/channel_tests/test_channel_invite.py::test_invalidated_token
FAILED http_tests/channel_tests/test_channel_join.py::test_invalidated_token
FAILED http_tests/channel_tests/test_channel_leave.py::test_invalid_token - F...
FAILED http_tests/channel_tests/test_channel_messages.py::test_message_timestamp
FAILED http_tests/channel_tests/test_channel_messages.py::test_over_fifty_messages_sent
FAILED http_tests/channel_tests/test_channel_messages.py::test_access_error_when_invalid_token_given
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_nonmember_cannot_remove_owner
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_nonmember_cannot_remove_owner
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_member_cannot_remove_owner
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_invalidated_token
FAILED http_tests/channels_tests/test_channels_create.py::test_invalidated_token
FAILED http_tests/channels_tests/test_channels_list.py::test_invalidated_token
FAILED http_tests/channels_tests/test_channels_listall.py::test_invalidated_token
FAILED http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_multiple
FAILED http_tests/dm_tests/test_dm_messages.py::test_over_fifty_messages_sent
FAILED http_tests/dm_tests/test_dm_messages.py::test_removal_by_edit_reflected
FAILED http_tests/dm_tests/test_dm_remove.py::test_successful_dm_removal - As...
FAILED http_tests/dm_tests/test_dm_remove.py::test_removal_removes_messages
FAILED http_tests/dm_tests/test_dm_remove.py::test_invalid_dm_id - Failed: DI...
FAILED http_tests/message_tests/test_message_edit.py::test_global_owner_cant_edit_members_message_dm
FAILED http_tests/message_tests/test_message_meta.py::test_message_ids_unique
FAILED http_tests/message_tests/test_message_meta.py::test_message_ids_unique_iter3
FAILED http_tests/message_tests/test_message_pin.py::test_successful_pin_global_owner_in_channel
FAILED http_tests/message_tests/test_message_pin.py::test_nonmember_cant_pin
FAILED http_tests/message_tests/test_message_react.py::test_successful_react_in_channel
FAILED http_tests/message_tests/test_message_react.py::test_successful_react_to_dm_message
FAILED http_tests/message_tests/test_message_react.py::test_nonmember_cannot_react
FAILED http_tests/message_tests/test_message_remove.py::test_global_owner_can_remove_members_message_channel
FAILED http_tests/message_tests/test_message_send.py::test_invalid_token - Fa...
FAILED http_tests/message_tests/test_message_sendlater.py::test_valid_future_message
FAILED http_tests/message_tests/test_message_sendlater.py::test_returns_immediately
FAILED http_tests/message_tests/test_message_sendlaterdm.py::test_valid_future_message
FAILED http_tests/message_tests/test_message_sendlaterdm.py::test_returns_immediately
FAILED http_tests/message_tests/test_message_share.py::test_successful_share_to_channel
FAILED http_tests/message_tests/test_message_share.py::test_successful_share_to_dm
FAILED http_tests/message_tests/test_message_share.py::test_successful_cross_share[True]
FAILED http_tests/message_tests/test_message_share.py::test_successful_cross_share[False]
FAILED http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_dm
FAILED http_tests/message_tests/test_message_share.py::test_cannot_share_from_unjoined_channel
FAILED http_tests/message_tests/test_message_share.py::test_cannot_share_from_unjoined_dm
FAILED http_tests/message_tests/test_message_share.py::test_invalid_og_message_id
FAILED http_tests/message_tests/test_message_unpin.py::test_successful_unpin_global_owner_in_channel
FAILED http_tests/message_tests/test_message_unpin.py::test_nonmember_cant_unpin
FAILED http_tests/message_tests/test_message_unreact.py::test_successful_unreact_in_channel
FAILED http_tests/message_tests/test_message_unreact.py::test_successful_unreact_to_dm_message
FAILED http_tests/message_tests/test_message_unreact.py::test_cant_unreact_twice
FAILED http_tests/message_tests/test_message_unreact.py::test_nonmember_cannot_unreact
FAILED http_tests/other_tests/test_clear.py::test_clear_works - AssertionErro...
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_send_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_senddm_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_edit_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_share_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlater_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlaterdm_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[a small message]
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
FAILED http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[dm]
FAILED http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_create_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_most_recent_20_notifications_fetched
FAILED http_tests/other_tests/test_search.py::test_no_matches - Exception: <R...
FAILED http_tests/other_tests/test_search.py::test_single_match - Exception: ...
FAILED http_tests/other_tests/test_search.py::test_multiple_matches - Excepti...
FAILED http_tests/other_tests/test_search.py::test_multiple_channels_joined
FAILED http_tests/other_tests/test_search.py::test_search_includes_only_joined_channels
FAILED http_tests/other_tests/test_search.py::test_search_matches_more_than_just_authorised_user
FAILED http_tests/other_tests/test_search.py::test_invalid_search[] - Excepti...
FAILED http_tests/other_tests/test_search.py::test_invalid_search[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]
FAILED http_tests/other_tests/test_search.py::test_invalid_token - Exception:...
FAILED http_tests/standup_tests/test_standup_active.py::test_correct_return_format[True]
FAILED http_tests/standup_tests/test_standup_send.py::test_messages_buffered_and_displayed_correctly
FAILED http_tests/standup_tests/test_standup_send.py::test_non_member_cannot_standup_send
FAILED http_tests/standup_tests/test_standup_start.py::test_standup_start_return_format
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_sendlater
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddmlater
FAILED http_tests/stats_tests/test_user_stats.py::test_involvement_tracked - ...
FAILED http_tests/stats_tests/test_users_stats.py::test_return_type_correct
FAILED http_tests/stats_tests/test_users_stats.py::test_channels_tracked_channels_create
FAILED http_tests/stats_tests/test_users_stats.py::test_dms_tracked_dm_create
FAILED http_tests/stats_tests/test_users_stats.py::test_dms_tracked_dm_remove
FAILED http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_send
FAILED http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_sendlater
FAILED http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_senddm
FAILED http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_senddmlater
FAILED http_tests/stats_tests/test_users_stats.py::test_messages_tracked_message_share
FAILED http_tests/stats_tests/test_users_stats.py::test_messages_tracked_standup_finish
FAILED http_tests/stats_tests/test_users_stats.py::test_messages_tracked_edited_to_removal
FAILED http_tests/stats_tests/test_users_stats.py::test_messages_tracked_deleted
FAILED http_tests/stats_tests/test_users_stats.py::test_messages_tracked_dm_removed
FAILED http_tests/stats_tests/test_users_stats.py::test_invalid_token - Faile...
FAILED http_tests/user_tests/test_user_profile_setemail.py::test_successful_email_change
FAILED http_tests/user_tests/test_user_profile_sethandle.py::test_successful_handle_change
FAILED http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[new handle]
FAILED http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[newh@ndle]
FAILED http_tests/user_tests/test_user_profile_setname.py::test_user_profile_setname_valid_name
FAILED http_tests/user_tests/test_user_profile_uploadphoto.py::test_cannot_upload_non_jpeg
======================= 112 failed, 247 passed in 43.09s =======================
